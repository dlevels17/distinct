%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: nov45-04.eps
%%Creator: Adobe Illustrator(R) 16.2
%%For: andrey
%%CreationDate: 11/26/2014
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.2.0 x723 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Печать</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-11-26T10:22:32+05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-11-26T10:22:32+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-11-26T10:22:32+05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6/m3ecdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:75A429F82B75E411B8FFE444031773DD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:75A429F82B75E411B8FFE444031773DD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:be6903ef-dac6-4c0e-a5a1-219c7b7ecd5b</stRef:instanceID>
            <stRef:documentID>xmp.did:FE89C0256474E411A093E5118616CD5A</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B12140069D73E4119C2ABC1E16750500</stEvt:instanceID>
                  <stEvt:when>2014-11-24T10:44:57+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75A429F82B75E411B8FFE444031773DD</stEvt:instanceID>
                  <stEvt:when>2014-11-26T10:22:32+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.615686 .839216 .921569 rgb
f
115.393 446.14 mo
116.332 447.119 117.652 447.779 119.012 447.779 cv
120.732 447.779 121.754 446.92 121.754 445.64 cv
121.754 444.299 120.813 443.879 119.572 443.318 cv
117.691 442.499 li
116.451 441.979 115.031 441.038 115.031 439.118 cv
115.031 437.117 116.771 435.637 119.152 435.637 cv
120.713 435.637 122.094 436.297 123.033 437.258 cv
122.133 438.338 li
121.332 437.577 120.373 437.098 119.152 437.098 cv
117.691 437.098 116.713 437.838 116.713 439.018 cv
116.713 440.278 117.852 440.758 118.893 441.198 cv
120.752 441.998 li
122.273 442.658 123.453 443.559 123.453 445.499 cv
123.453 447.58 121.754 449.24 118.992 449.24 cv
117.152 449.24 115.531 448.479 114.391 447.3 cv
115.393 446.14 li
cp
.415686 .509804 .658824 rgb
f
126.432 435.877 mo
133.994 435.877 li
133.994 437.277 li
128.092 437.277 li
128.092 441.398 li
133.072 441.398 li
133.072 442.818 li
128.092 442.818 li
128.092 447.58 li
134.193 447.58 li
134.193 449 li
126.432 449 li
126.432 435.877 li
cp
f
142.953 443.659 mo
142.332 441.658 li
141.852 440.198 141.432 438.758 141.012 437.237 cv
140.932 437.237 li
140.531 438.758 140.111 440.198 139.631 441.658 cv
139.012 443.659 li
142.953 443.659 li
cp
143.373 444.999 mo
138.592 444.999 li
137.332 449 li
135.631 449 li
140.072 435.877 li
141.953 435.877 li
146.393 449 li
144.613 449 li
143.373 444.999 li
cp
f
150.313 442.099 mo
152.512 442.099 li
154.553 442.099 155.693 441.259 155.693 439.558 cv
155.693 437.838 154.553 437.218 152.512 437.218 cv
150.313 437.218 li
150.313 442.099 li
cp
155.854 449 mo
152.691 443.459 li
150.313 443.459 li
150.313 449 li
148.652 449 li
148.652 435.877 li
152.752 435.877 li
155.434 435.877 157.354 436.838 157.354 439.558 cv
157.354 441.599 156.193 442.839 154.412 443.278 cv
157.732 449 li
155.854 449 li
cp
f
165.752 435.637 mo
167.332 435.637 168.572 436.397 169.332 437.258 cv
168.393 438.317 li
167.713 437.577 166.873 437.098 165.771 437.098 cv
163.271 437.098 161.631 439.138 161.631 442.398 cv
161.631 445.699 163.211 447.779 165.691 447.779 cv
166.953 447.779 167.873 447.26 168.713 446.319 cv
169.652 447.34 li
168.613 448.54 167.332 449.24 165.652 449.24 cv
162.352 449.24 159.91 446.72 159.91 442.438 cv
159.91 438.218 162.391 435.637 165.752 435.637 cv
cp
f
172.492 435.877 mo
174.152 435.877 li
174.152 441.378 li
180.254 441.378 li
180.254 435.877 li
181.934 435.877 li
181.934 449 li
180.254 449 li
180.254 442.818 li
174.152 442.818 li
174.152 449 li
172.492 449 li
172.492 435.877 li
cp
f
190.371 435.877 mo
197.934 435.877 li
197.934 437.277 li
192.031 437.277 li
192.031 441.398 li
197.012 441.398 li
197.012 442.818 li
192.031 442.818 li
192.031 447.58 li
198.133 447.58 li
198.133 449 li
190.371 449 li
190.371 435.877 li
cp
f
201.313 435.877 mo
203.031 435.877 li
207.773 444.119 li
209.193 446.84 li
209.273 446.84 li
209.193 445.52 209.074 444.039 209.074 442.658 cv
209.074 435.877 li
210.654 435.877 li
210.654 449 li
208.934 449 li
204.172 440.738 li
202.752 438.038 li
202.672 438.038 li
202.771 439.358 202.893 440.758 202.893 442.139 cv
202.893 449 li
201.313 449 li
201.313 435.877 li
cp
f
219.932 435.637 mo
221.732 435.637 222.932 436.457 223.693 437.258 cv
222.752 438.317 li
222.092 437.617 221.271 437.098 219.951 437.098 cv
217.311 437.098 215.611 439.138 215.611 442.398 cv
215.611 445.699 217.172 447.779 219.971 447.779 cv
220.912 447.779 221.813 447.479 222.332 447 cv
222.332 443.579 li
219.551 443.579 li
219.551 442.198 li
223.852 442.198 li
223.852 447.72 li
222.992 448.6 221.553 449.24 219.791 449.24 cv
216.352 449.24 213.891 446.72 213.891 442.438 cv
213.891 438.218 216.432 435.637 219.932 435.637 cv
cp
f
227.391 435.877 mo
229.051 435.877 li
229.051 449 li
227.391 449 li
227.391 435.877 li
cp
f
233.051 435.877 mo
234.771 435.877 li
239.512 444.119 li
240.932 446.84 li
241.012 446.84 li
240.932 445.52 240.813 444.039 240.813 442.658 cv
240.813 435.877 li
242.393 435.877 li
242.393 449 li
240.672 449 li
235.912 440.738 li
234.49 438.038 li
234.412 438.038 li
234.512 439.358 234.631 440.758 234.631 442.139 cv
234.631 449 li
233.051 449 li
233.051 435.877 li
cp
f
246.391 435.877 mo
253.951 435.877 li
253.951 437.277 li
248.051 437.277 li
248.051 441.398 li
253.031 441.398 li
253.031 442.818 li
248.051 442.818 li
248.051 447.58 li
254.152 447.58 li
254.152 449 li
246.391 449 li
246.391 435.877 li
cp
f
270.492 442.379 mo
270.492 439.118 268.951 437.098 266.611 437.098 cv
264.27 437.098 262.73 439.118 262.73 442.379 cv
262.73 445.659 264.27 447.779 266.611 447.779 cv
268.951 447.779 270.492 445.659 270.492 442.379 cv
cp
261.01 442.379 mo
261.01 438.178 263.311 435.637 266.611 435.637 cv
269.912 435.637 272.232 438.197 272.232 442.379 cv
272.232 446.6 269.912 449.24 266.611 449.24 cv
263.311 449.24 261.01 446.6 261.01 442.379 cv
cp
f
279.27 442.438 mo
281.551 442.438 282.65 441.599 282.65 439.738 cv
282.65 437.838 281.531 437.218 279.27 437.218 cv
277.109 437.218 li
277.109 442.438 li
279.27 442.438 li
cp
275.449 435.877 mo
279.471 435.877 li
282.371 435.877 284.311 436.857 284.311 439.738 cv
284.311 442.499 282.352 443.799 279.471 443.799 cv
277.109 443.799 li
277.109 449 li
275.449 449 li
275.449 435.877 li
cp
f
289.609 437.277 mo
285.65 437.277 li
285.65 435.877 li
295.252 435.877 li
295.252 437.277 li
291.291 437.277 li
291.291 449 li
289.609 449 li
289.609 437.277 li
cp
f
298.01 435.877 mo
299.67 435.877 li
299.67 449 li
298.01 449 li
298.01 435.877 li
cp
f
303.67 435.877 mo
305.629 435.877 li
308.17 442.919 li
309.131 445.6 li
309.211 445.6 li
310.131 442.919 li
312.65 435.877 li
314.611 435.877 li
314.611 449 li
313.031 449 li
313.031 441.778 li
313.031 440.618 313.15 439.058 313.252 437.897 cv
313.172 437.897 li
312.111 440.818 li
309.59 447.68 li
308.65 447.68 li
306.109 440.818 li
305.068 437.897 li
304.99 437.897 li
305.068 439.058 305.209 440.618 305.209 441.778 cv
305.209 449 li
303.67 449 li
303.67 435.877 li
cp
f
318.609 435.877 mo
320.27 435.877 li
320.27 449 li
318.609 449 li
318.609 435.877 li
cp
f
323.369 448 mo
330.27 437.277 li
323.988 437.277 li
323.988 435.877 li
332.35 435.877 li
332.35 436.857 li
325.43 447.58 li
332.41 447.58 li
332.41 449 li
323.369 449 li
323.369 448 li
cp
f
340.91 443.659 mo
340.289 441.658 li
339.809 440.198 339.389 438.758 338.969 437.237 cv
338.889 437.237 li
338.488 438.758 338.068 440.198 337.588 441.658 cv
336.969 443.659 li
340.91 443.659 li
cp
341.33 444.999 mo
336.549 444.999 li
335.289 449 li
333.588 449 li
338.029 435.877 li
339.91 435.877 li
344.35 449 li
342.57 449 li
341.33 444.999 li
cp
f
348.527 437.277 mo
344.568 437.277 li
344.568 435.877 li
354.17 435.877 li
354.17 437.277 li
350.209 437.277 li
350.209 449 li
348.527 449 li
348.527 437.277 li
cp
f
356.928 435.877 mo
358.588 435.877 li
358.588 449 li
356.928 449 li
356.928 435.877 li
cp
f
371.309 442.379 mo
371.309 439.118 369.768 437.098 367.428 437.098 cv
365.088 437.098 363.547 439.118 363.547 442.379 cv
363.547 445.659 365.088 447.779 367.428 447.779 cv
369.768 447.779 371.309 445.659 371.309 442.379 cv
cp
361.826 442.379 mo
361.826 438.178 364.127 435.637 367.428 435.637 cv
370.729 435.637 373.049 438.197 373.049 442.379 cv
373.049 446.6 370.729 449.24 367.428 449.24 cv
364.127 449.24 361.826 446.6 361.826 442.379 cv
cp
f
376.268 435.877 mo
377.986 435.877 li
382.729 444.119 li
384.148 446.84 li
384.229 446.84 li
384.148 445.52 384.029 444.039 384.029 442.658 cv
384.029 435.877 li
385.609 435.877 li
385.609 449 li
383.889 449 li
379.127 440.738 li
377.707 438.038 li
377.627 438.038 li
377.727 439.358 377.848 440.758 377.848 442.139 cv
377.848 449 li
376.268 449 li
376.268 435.877 li
cp
f
413.608 349.343 mo
413.608 350.365 412.81 351.197 411.826 351.197 cv
410.841 351.197 410.045 350.365 410.045 349.343 cv
410.045 344.018 li
410.045 342.992 410.841 342.165 411.826 342.165 cv
412.81 342.165 413.608 342.992 413.608 344.018 cv
413.608 349.343 li
cp
.862745 .905882 .921569 rgb
f
420.753 349.343 mo
420.753 350.365 419.954 351.197 418.971 351.197 cv
417.989 351.197 417.189 350.365 417.189 349.343 cv
417.189 344.018 li
417.189 342.992 417.989 342.165 418.971 342.165 cv
419.954 342.165 420.753 342.992 420.753 344.018 cv
420.753 349.343 li
cp
f
427.898 349.343 mo
427.898 350.365 427.103 351.197 426.115 351.197 cv
425.136 351.197 424.337 350.365 424.337 349.343 cv
424.337 344.018 li
424.337 342.992 425.136 342.165 426.115 342.165 cv
427.103 342.165 427.898 342.992 427.898 344.018 cv
427.898 349.343 li
cp
f
435.044 349.343 mo
435.044 350.365 434.249 351.197 433.263 351.197 cv
432.279 351.197 431.484 350.365 431.484 349.343 cv
431.484 344.018 li
431.484 342.992 432.279 342.165 433.263 342.165 cv
434.249 342.165 435.044 342.992 435.044 344.018 cv
435.044 349.343 li
cp
f
438.186 373.586 mo
438.186 375.328 436.832 376.736 435.159 376.736 cv
409.93 376.736 li
408.259 376.736 406.905 375.328 406.905 373.586 cv
406.905 357.049 li
438.186 357.049 li
438.186 373.586 li
cp
436.378 348.145 mo
436.378 349.343 li
436.378 351.134 434.98 352.587 433.263 352.587 cv
431.545 352.587 430.144 351.134 430.144 349.343 cv
430.144 347.99 li
429.233 347.99 li
429.233 349.343 li
429.233 351.134 427.836 352.587 426.115 352.587 cv
424.397 352.587 423 351.134 423 349.343 cv
423 347.99 li
422.089 347.99 li
422.089 349.343 li
422.089 351.134 420.692 352.587 418.971 352.587 cv
417.253 352.587 415.855 351.134 415.855 349.343 cv
415.855 347.99 li
414.944 347.99 li
414.944 349.343 li
414.944 351.134 413.548 352.587 411.826 352.587 cv
410.108 352.587 408.711 351.134 408.711 349.343 cv
408.711 348.145 li
406.376 348.72 404.631 350.902 404.631 353.506 cv
404.631 373.586 li
404.631 376.627 407.01 379.1 409.93 379.1 cv
435.159 379.1 li
438.081 379.1 440.455 376.627 440.455 373.586 cv
440.455 353.506 li
440.455 350.902 438.712 348.72 436.378 348.145 cv
cp
f
418.513 360.421 mo
419.687 360.421 li
419.687 360.791 li
418.932 360.791 li
418.932 361.239 li
419.575 361.239 li
419.575 361.609 li
418.932 361.609 li
418.932 362.361 li
418.513 362.361 li
418.513 360.421 li
cp
f
420.429 361.313 mo
420.646 361.313 li
420.867 361.313 420.988 361.217 420.988 361.024 cv
420.988 360.836 420.867 360.773 420.646 360.773 cv
420.429 360.773 li
420.429 361.313 li
cp
421.019 362.361 mo
420.658 361.661 li
420.429 361.661 li
420.429 362.361 li
420.011 362.361 li
420.011 360.421 li
420.683 360.421 li
421.076 360.421 421.398 360.566 421.398 361.024 cv
421.398 361.313 421.27 361.494 421.069 361.587 cv
421.489 362.361 li
421.019 362.361 li
cp
f
421.769 360.421 mo
422.192 360.421 li
422.192 362.361 li
421.769 362.361 li
421.769 360.421 li
cp
f
423.13 362.009 mo
423.447 362.009 423.659 361.846 423.659 361.381 cv
423.659 360.92 423.447 360.775 423.13 360.775 cv
423.051 360.775 li
423.051 362.009 li
423.13 362.009 li
cp
422.634 360.421 mo
423.154 360.421 li
423.726 360.421 424.089 360.717 424.089 361.381 cv
424.089 362.049 423.726 362.361 423.181 362.361 cv
422.634 362.361 li
422.634 360.421 li
cp
f
425.205 361.557 mo
425.161 361.381 li
425.109 361.188 425.06 360.957 425.01 360.757 cv
424.999 360.757 li
424.954 360.964 424.905 361.188 424.853 361.381 cv
424.809 361.557 li
425.205 361.557 li
cp
425.289 361.901 mo
424.721 361.901 li
424.608 362.361 li
424.18 362.361 li
424.763 360.421 li
425.269 360.421 li
425.853 362.361 li
425.404 362.361 li
425.289 361.901 li
cp
f
426.324 361.672 mo
425.761 360.421 li
426.209 360.421 li
426.375 360.869 li
426.43 361.014 426.476 361.146 426.529 361.299 cv
426.538 361.299 li
426.593 361.146 426.645 361.014 426.696 360.869 cv
426.865 360.421 li
427.309 360.421 li
426.741 361.672 li
426.741 362.361 li
426.324 362.361 li
426.324 361.672 li
cp
f
416.639 372.717 mo
418.628 372.717 li
418.628 366.052 li
417.047 366.052 li
417.047 365.301 li
417.84 365.16 418.411 364.936 418.886 364.636 cv
419.745 364.636 li
419.745 372.717 li
421.542 372.717 li
421.542 373.682 li
416.639 373.682 li
416.639 372.717 li
cp
f
423.218 371.854 mo
423.736 372.393 424.392 372.889 425.41 372.889 cv
426.476 372.889 427.319 372.082 427.319 370.816 cv
427.319 369.572 426.583 368.831 425.465 368.831 cv
424.866 368.831 424.499 369.031 423.979 369.387 cv
423.381 368.988 li
423.668 364.636 li
428.015 364.636 li
428.015 365.642 li
424.651 365.642 li
424.417 368.324 li
424.823 368.096 425.22 367.953 425.754 367.953 cv
427.235 367.953 428.45 368.831 428.45 370.789 cv
428.45 372.745 427.034 373.853 425.52 373.853 cv
424.131 373.853 423.269 373.241 422.672 372.619 cv
423.218 371.854 li
cp
f
92.0342 366.377 mo
92.5859 362.883 li
95.6943 362.883 li
94.7598 366.377 li
92.0342 366.377 li
cp
67.0225 362.883 mo
72.8994 362.883 li
73.7725 366.377 li
68.252 366.377 li
67.0225 362.883 li
cp
87.2109 361.88 mo
86.6123 357.882 li
92.3662 357.882 li
91.7334 361.88 li
87.2109 361.88 li
cp
87.3613 362.883 mo
91.5742 362.883 li
91.0342 366.297 li
91.041 366.377 li
87.8857 366.377 li
87.3613 362.883 li
cp
72.6807 357.882 mo
78.6484 357.882 li
79.6436 361.88 li
73.6797 361.88 li
72.6807 357.882 li
cp
65.2803 357.882 mo
71.6504 357.882 li
72.6484 361.88 li
66.6758 361.88 li
65.2803 357.882 li
cp
70.3994 352.884 mo
71.3984 356.884 li
64.9268 356.884 li
63.5264 352.884 li
70.3994 352.884 li
cp
84.7021 351.884 mo
78.1758 351.884 li
77.2998 348.388 li
84.1787 348.388 li
84.7021 351.884 li
cp
85.7129 351.884 mo
85.1875 348.388 li
93.8633 348.388 li
93.3135 351.884 li
85.7129 351.884 li
cp
85.8633 352.884 mo
93.1514 352.884 li
92.5225 356.884 li
86.4629 356.884 li
85.8633 352.884 li
cp
78.3965 356.884 mo
72.4277 356.884 li
71.4277 352.884 li
77.3955 352.884 li
78.3965 356.884 li
cp
85.5977 357.882 mo
86.2031 361.88 li
80.6768 361.88 li
79.6729 357.882 li
85.5977 357.882 li
cp
79.4238 356.884 mo
78.4248 352.884 li
84.8525 352.884 li
85.4512 356.884 li
79.4238 356.884 li
cp
76.2734 348.388 mo
77.1465 351.884 li
71.1797 351.884 li
70.3018 348.388 li
76.2734 348.388 li
cp
69.2773 348.388 mo
70.1475 351.884 li
63.1797 351.884 li
61.9551 348.388 li
69.2773 348.388 li
cp
74.8027 366.377 mo
73.9277 362.883 li
79.8936 362.883 li
80.7695 366.377 li
74.8027 366.377 li
cp
81.7969 366.377 mo
80.9258 362.883 li
86.3506 362.883 li
86.8711 366.377 li
81.7969 366.377 li
cp
95.959 361.88 mo
92.7441 361.88 li
93.3721 357.882 li
97.0244 357.882 li
95.959 361.88 li
cp
97.291 356.884 mo
93.5391 356.884 li
94.1631 352.884 li
98.3574 352.884 li
97.291 356.884 li
cp
98.6221 351.884 mo
94.3223 351.884 li
94.873 348.388 li
99.5586 348.388 li
98.6221 351.884 li
cp
111.271 336.396 mo
102.753 336.396 li
100.089 346.389 li
60.543 346.389 li
60.543 346.399 li
60.4346 346.399 60.3242 346.406 60.2158 346.445 cv
59.6953 346.626 59.4189 347.193 59.6006 347.719 cv
66.835 368.375 li
96.2939 368.375 li
104.289 338.395 li
111.271 338.395 li
111.821 338.395 112.27 337.944 112.27 337.396 cv
112.27 336.844 111.821 336.396 111.271 336.396 cv
cp
f
91.0273 376.372 mo
89.6494 376.372 88.5303 375.249 88.5303 373.875 cv
88.5303 372.496 89.6494 371.374 91.0273 371.374 cv
92.4063 371.374 93.5273 372.496 93.5273 373.875 cv
93.5273 375.249 92.4063 376.372 91.0273 376.372 cv
cp
72.0381 376.372 mo
70.6641 376.372 69.54 375.249 69.54 373.875 cv
69.54 372.496 70.6641 371.374 72.0381 371.374 cv
73.416 371.374 74.5371 372.496 74.5371 373.875 cv
74.5371 375.249 73.416 376.372 72.0381 376.372 cv
cp
91.0273 369.376 mo
88.8896 369.376 87.1074 370.872 86.6504 372.873 cv
76.418 372.873 li
75.9609 370.872 74.1787 369.376 72.0381 369.376 cv
69.5537 369.376 67.541 371.389 67.541 373.875 cv
67.541 376.357 69.5537 378.37 72.0381 378.37 cv
74.5234 378.37 76.5332 376.357 76.5332 373.875 cv
86.5313 373.875 li
86.5313 376.357 88.5459 378.37 91.0273 378.37 cv
93.5127 378.37 95.5244 376.357 95.5244 373.875 cv
95.5244 371.389 93.5127 369.376 91.0273 369.376 cv
cp
f
369.655 289.088 mo
136.343 289.088 li
136.343 131.5 li
369.655 131.5 li
369.655 289.088 li
.345098 .501961 .752941 rgb
f
366.06 286.334 mo
139.029 286.334 li
139.029 136.588 li
366.06 136.588 li
366.06 286.334 li
369.149 126.684 mo
134.53 126.684 li
129.614 126.684 125.977 130.672 125.977 135.59 cv
125.977 297.059 li
377.698 297.059 li
377.698 135.59 li
377.698 130.672 374.066 126.684 369.149 126.684 cv
.129412 .211765 .321569 rgb
f
93.2597 308.549 mo
101.376 314.01 li
402.308 314.01 li
410.424 308.549 li
93.2597 308.549 li
.172549 .560784 .560784 rgb
f
89.8935 297.09 mo
89.8935 301.482 li
89.8935 306.398 93.7159 310.383 98.4385 310.383 cv
405.233 310.383 li
409.956 310.383 413.782 306.398 413.782 301.482 cv
413.782 297.09 li
89.8935 297.09 li
.858824 .858824 .858824 rgb
f
286.814 305.549 mo
217.557 305.549 li
216.661 305.549 215.927 304.738 215.927 303.738 cv
215.927 302.736 216.661 301.924 217.557 301.924 cv
286.814 301.924 li
287.718 301.924 288.44 302.736 288.44 303.738 cv
288.44 304.738 287.718 305.549 286.814 305.549 cv
.619608 .662745 .698039 rgb
f
403.737 215.764 mo
403.737 233.162 389.634 247.266 372.236 247.266 cv
354.839 247.266 340.735 233.162 340.735 215.764 cv
340.735 198.367 354.839 184.264 372.236 184.264 cv
389.634 184.264 403.737 198.367 403.737 215.764 cv
cp
.686275 .768627 .0156863 rgb
f
353.69 204.049 mo
355.083 202.637 355.777 201.848 355.777 201.113 cv
355.777 200.582 355.493 200.172 354.857 200.172 cv
354.474 200.172 354.129 200.412 353.869 200.729 cv
353.678 200.543 li
353.996 200.193 354.368 199.922 354.884 199.922 cv
355.64 199.922 356.076 200.391 356.076 201.105 cv
356.076 201.947 355.307 202.756 354.136 204 cv
354.368 203.988 354.611 203.967 354.844 203.967 cv
356.287 203.967 li
356.287 204.234 li
353.69 204.234 li
353.69 204.049 li
cp
.203922 .211765 .258824 rgb
f
356.957 203.512 mo
357.209 203.789 357.546 204.055 358.13 204.055 cv
358.699 204.055 359.117 203.682 359.117 203.121 cv
359.117 202.537 358.692 202.139 357.641 202.139 cv
357.641 201.881 li
358.62 201.881 358.964 201.471 358.964 200.961 cv
358.964 200.484 358.626 200.172 358.109 200.172 cv
357.718 200.172 357.381 200.377 357.136 200.635 cv
356.964 200.438 li
357.257 200.152 357.62 199.922 358.109 199.922 cv
358.766 199.922 359.269 200.291 359.269 200.941 cv
359.269 201.496 358.925 201.828 358.461 201.988 cv
358.461 202.014 li
358.984 202.127 359.422 202.518 359.422 203.113 cv
359.422 203.85 358.858 204.313 358.13 204.313 cv
357.455 204.313 357.057 204 356.785 203.717 cv
356.957 203.512 li
cp
f
360.104 203.537 mo
360.356 203.797 360.687 204.055 361.265 204.055 cv
361.827 204.055 362.316 203.598 362.316 202.914 cv
362.316 202.232 361.912 201.822 361.283 201.822 cv
360.958 201.822 360.745 201.934 360.495 202.107 cv
360.29 201.98 li
360.442 200 li
362.396 200 li
362.396 200.258 li
360.707 200.258 li
360.575 201.789 li
360.793 201.656 361.018 201.563 361.33 201.563 cv
362.046 201.563 362.621 201.975 362.621 202.9 cv
362.621 203.803 361.951 204.313 361.27 204.313 cv
360.595 204.313 360.21 204.014 359.938 203.742 cv
360.104 203.537 li
cp
f
363.669 203.709 mo
363.813 203.709 363.947 203.822 363.947 204.014 cv
363.947 204.199 363.813 204.313 363.669 204.313 cv
363.522 204.313 363.383 204.199 363.383 204.014 cv
363.383 203.822 363.522 203.709 363.669 203.709 cv
cp
f
366.868 201.033 mo
366.868 200.563 366.549 200.166 366.001 200.166 cv
365.53 200.166 365.186 200.496 365.186 200.953 cv
365.186 201.557 365.755 201.795 366.312 202.014 cv
366.669 201.721 366.868 201.398 366.868 201.033 cv
cp
366.001 204.066 mo
366.596 204.066 366.987 203.682 366.987 203.199 cv
366.987 202.551 366.351 202.326 365.696 202.066 cv
365.265 202.318 364.947 202.67 364.947 203.133 cv
364.947 203.656 365.391 204.066 366.001 204.066 cv
cp
365.503 201.955 mo
365.503 201.928 li
365.19 201.721 364.894 201.404 364.894 200.953 cv
364.894 200.344 365.384 199.922 366.001 199.922 cv
366.723 199.922 367.146 200.391 367.146 201.027 cv
367.146 201.49 366.787 201.9 366.542 202.1 cv
366.542 202.127 li
366.907 202.352 367.286 202.637 367.286 203.205 cv
367.286 203.822 366.769 204.313 366.001 204.313 cv
365.224 204.313 364.655 203.814 364.655 203.146 cv
364.655 202.578 365.105 202.166 365.503 201.955 cv
cp
f
370.086 200.258 mo
367.855 200.258 li
367.855 200 li
370.458 200 li
370.458 200.172 li
369.444 201.518 369.193 202.578 369.127 204.234 cv
368.808 204.234 li
368.874 202.523 369.233 201.451 370.086 200.258 cv
cp
f
356.045 230.037 mo
353.924 230.037 li
353.924 226.855 li
356.045 226.855 li
356.045 230.037 li
cp
1 1 1 rgb
f
359.227 230.037 mo
357.104 230.037 li
357.104 225.807 li
359.227 225.807 li
359.227 230.037 li
cp
f
362.407 229.891 mo
360.288 229.891 li
360.288 220.703 li
362.407 220.703 li
362.407 229.891 li
cp
f
365.591 230.018 mo
363.47 230.018 li
363.47 219.768 li
365.591 219.768 li
365.591 230.018 li
cp
f
368.771 230.037 mo
366.649 230.037 li
366.649 219.432 li
368.771 219.432 li
368.771 230.037 li
cp
f
371.953 230.037 mo
369.831 230.037 li
369.831 222.262 li
371.953 222.262 li
371.953 230.037 li
cp
f
375.134 230.037 mo
373.012 230.037 li
373.012 218.373 li
375.134 218.373 li
375.134 230.037 li
cp
f
378.315 230.037 mo
376.193 230.037 li
376.193 219.432 li
378.315 219.432 li
378.315 230.037 li
cp
f
381.497 230.037 mo
379.375 230.037 li
379.375 216.957 li
381.497 216.957 li
381.497 230.037 li
cp
f
384.678 230.037 mo
382.558 230.037 li
382.558 211.654 li
384.678 211.654 li
384.678 230.037 li
cp
f
387.86 230.037 mo
385.737 230.037 li
385.737 214.482 li
387.86 214.482 li
387.86 230.037 li
cp
f
391.041 230.037 mo
388.922 230.037 li
388.922 211.654 li
391.041 211.654 li
391.041 230.037 li
cp
f
359.227 225.787 mo
357.104 225.787 li
357.104 218.383 li
359.227 218.383 li
359.227 225.787 li
cp
.203922 .211765 .258824 rgb
f
356.045 226.855 mo
353.924 226.855 li
353.924 223.674 li
356.045 223.674 li
356.045 226.855 li
cp
f
362.407 220.629 mo
360.288 220.629 li
360.288 216.105 li
362.407 216.105 li
362.407 220.629 li
cp
f
365.591 219.762 mo
363.47 219.762 li
363.47 213.049 li
365.591 213.049 li
365.591 219.762 li
cp
f
368.771 219.609 mo
366.649 219.609 li
366.649 211.654 li
368.771 211.654 li
368.771 219.609 li
cp
f
371.953 222.262 mo
369.831 222.262 li
369.831 210.24 li
371.953 210.24 li
371.953 222.262 li
cp
f
375.134 218.383 mo
373.012 218.383 li
373.012 214.482 li
375.134 214.482 li
375.134 218.383 li
cp
f
378.315 219.609 mo
376.193 219.609 li
376.193 209.18 li
378.315 209.18 li
378.315 219.609 li
cp
f
381.497 217.313 mo
379.375 217.313 li
379.375 207.412 li
381.497 207.412 li
381.497 217.313 li
cp
f
384.678 212.018 mo
382.558 212.018 li
382.558 205.998 li
384.678 205.998 li
384.678 212.018 li
cp
f
387.86 214.6 mo
385.737 214.6 li
385.737 204.586 li
387.86 204.586 li
387.86 214.6 li
cp
f
391.041 211.654 mo
388.922 211.654 li
388.922 201.758 li
391.041 201.758 li
391.041 211.654 li
cp
f
356.904 216.547 mo
356.588 216.547 li
356.588 216.398 li
356.904 216.398 li
356.904 216.064 li
357.06 216.064 li
357.06 216.398 li
357.376 216.398 li
357.376 216.547 li
357.06 216.547 li
357.06 216.881 li
356.904 216.881 li
356.904 216.547 li
cp
f
357.574 216.789 mo
357.642 216.857 357.729 216.912 357.841 216.912 cv
357.964 216.912 358.047 216.848 358.047 216.74 cv
358.047 216.625 357.974 216.549 357.718 216.549 cv
357.718 216.4 li
357.938 216.4 358.011 216.324 358.011 216.221 cv
358.011 216.127 357.948 216.07 357.846 216.07 cv
357.619 216.178 li
357.513 216.051 li
357.609 215.965 357.718 215.91 357.852 215.91 cv
358.068 215.91 358.216 216.016 358.216 216.207 cv
358.216 216.334 358.142 216.416 358.02 216.465 cv
358.02 216.475 li
358.152 216.508 358.253 216.604 358.253 216.752 cv
358.253 216.957 358.075 217.078 357.859 217.078 cv
357.677 217.078 357.556 217.008 357.478 216.918 cv
357.574 216.789 li
cp
f
358.974 216.348 mo
358.954 216.15 358.872 216.066 358.763 216.066 cv
358.67 216.066 358.595 216.143 358.595 216.277 cv
358.595 216.41 358.661 216.479 358.774 216.479 cv
358.836 216.479 358.913 216.441 358.974 216.348 cv
cp
358.534 216.826 mo
358.716 216.912 li
358.856 216.912 358.971 216.807 358.98 216.494 cv
358.733 216.627 li
358.54 216.627 358.406 216.516 358.406 216.277 cv
358.406 216.055 358.566 215.91 358.761 215.91 cv
358.98 215.91 359.167 216.082 359.167 216.457 cv
359.167 216.896 358.957 217.078 358.725 217.078 cv
358.592 217.078 358.492 217.021 358.424 216.949 cv
358.534 216.826 li
cp
f
372.734 212.588 mo
373.155 212.588 li
373.155 212.738 li
372.734 212.738 li
372.734 212.588 li
cp
f
373.358 212.943 mo
373.61 212.943 li
373.61 212.203 li
373.403 212.203 li
373.403 212.076 li
373.515 212.055 373.594 212.027 373.663 211.982 cv
373.817 211.982 li
373.817 212.943 li
374.037 212.943 li
374.037 213.111 li
373.358 213.111 li
373.358 212.943 li
cp
f
374.201 212.99 mo
374.516 212.688 374.712 212.488 374.712 212.318 cv
374.712 212.201 374.647 212.123 374.525 212.123 cv
374.307 212.25 li
374.194 212.137 li
374.296 212.027 374.399 211.963 374.553 211.963 cv
374.769 211.963 374.908 212.1 374.908 212.307 cv
374.908 212.508 374.721 212.713 374.499 212.949 cv
374.688 212.936 li
374.963 212.936 li
374.963 213.111 li
374.201 213.111 li
374.201 212.99 li
cp
f
388.199 199.813 mo
387.881 199.813 li
387.881 199.662 li
388.199 199.662 li
388.199 199.328 li
388.353 199.328 li
388.353 199.662 li
388.667 199.662 li
388.667 199.813 li
388.353 199.813 li
388.353 200.146 li
388.199 200.146 li
388.199 199.813 li
cp
f
388.858 200.156 mo
389.11 200.156 li
389.11 199.416 li
388.904 199.416 li
388.904 199.289 li
389.014 199.268 389.093 199.24 389.164 199.195 cv
389.315 199.195 li
389.315 200.156 li
389.537 200.156 li
389.537 200.322 li
388.858 200.322 li
388.858 200.156 li
cp
f
389.771 200.057 mo
389.839 200.121 389.922 200.176 390.034 200.176 cv
390.159 200.176 390.252 200.098 390.252 199.961 cv
390.252 199.826 390.168 199.75 390.045 199.75 cv
389.865 199.814 li
389.768 199.752 li
389.801 199.195 li
390.402 199.195 li
390.402 199.369 li
389.979 199.369 li
389.954 199.641 li
390.103 199.604 li
390.296 199.604 390.457 199.713 390.457 199.957 cv
390.457 200.203 390.269 200.344 390.061 200.344 cv
389.88 200.344 389.761 200.271 389.678 200.188 cv
389.771 200.057 li
cp
f
390.673 200.156 mo
390.923 200.156 li
390.923 199.416 li
390.717 199.416 li
390.717 199.289 li
390.827 199.268 390.906 199.24 390.977 199.195 cv
391.128 199.195 li
391.128 200.156 li
391.349 200.156 li
391.349 200.322 li
390.673 200.322 li
390.673 200.156 li
cp
f
329.124 334.32 mo
309.024 334.32 li
309.024 361.291 li
329.124 361.291 li
333.535 361.291 337.115 357.713 337.115 353.301 cv
337.115 342.313 li
337.115 337.896 333.535 334.32 329.124 334.32 cv
cp
.286275 .25098 .396078 rgb
f
317.584 348.209 mo
316.199 346.615 316.369 344.191 317.96 342.807 cv
318.656 342.201 319.547 341.867 320.47 341.867 cv
321.577 341.867 322.632 342.348 323.358 343.184 cv
324.029 343.955 324.36 344.941 324.29 345.963 cv
324.218 346.98 323.755 347.912 322.982 348.584 cv
322.287 349.188 321.396 349.521 320.473 349.521 cv
319.365 349.521 318.312 349.043 317.584 348.209 cv
cp
329.263 353.471 mo
325.412 349.043 li
325.997 348.18 326.353 347.178 326.427 346.111 cv
326.537 344.52 326.022 342.98 324.976 341.777 cv
323.841 340.475 322.197 339.723 320.47 339.723 cv
319.029 339.723 317.64 340.244 316.554 341.193 cv
314.069 343.35 313.808 347.129 315.967 349.613 cv
317.102 350.916 318.745 351.666 320.473 351.666 cv
321.392 351.666 322.291 351.451 323.103 351.053 cv
326.95 355.477 li
327.507 356.117 328.475 356.184 329.111 355.627 cv
329.748 355.072 329.816 354.107 329.263 353.471 cv
cp
.952941 .933333 .878431 rgb
f
308.621 334.32 mo
172.123 334.32 li
167.71 334.32 164.131 337.896 164.131 342.313 cv
164.131 353.301 li
164.131 357.713 167.71 361.291 172.123 361.291 cv
308.621 361.291 li
308.621 334.32 li
cp
f
177.888 349.875 mo
178.434 350.313 178.993 350.625 179.745 350.625 cv
180.577 350.625 180.994 350.186 180.994 349.639 cv
180.994 348.99 180.24 348.703 179.55 348.443 cv
178.653 348.121 177.667 347.689 177.667 346.625 cv
177.667 345.613 178.474 344.832 179.837 344.832 cv
180.628 344.832 181.317 345.158 181.799 345.547 cv
181.292 346.225 li
180.864 345.898 180.408 345.662 179.85 345.662 cv
179.058 345.662 178.694 346.094 178.694 346.574 cv
178.694 347.17 179.382 347.391 180.096 347.664 cv
181.006 348.002 182.019 348.379 182.019 349.572 cv
182.019 350.6 181.201 351.457 179.706 351.457 cv
178.811 351.457 177.952 351.082 177.355 350.588 cv
177.888 349.875 li
cp
0 .160784 .211765 rgb
f
187.445 347.68 mo
187.445 346.393 186.877 345.678 185.889 345.678 cv
185.006 345.678 184.199 346.404 184.068 347.68 cv
187.445 347.68 li
cp
185.861 344.832 mo
187.473 344.832 188.382 345.988 188.382 347.795 cv
188.382 348.016 188.369 348.223 188.345 348.379 cv
184.083 348.379 li
184.162 349.744 184.979 350.6 186.188 350.6 cv
186.785 350.6 187.292 350.404 187.759 350.107 cv
188.135 350.809 li
187.59 351.156 186.913 351.457 186.059 351.457 cv
184.368 351.457 183.03 350.223 183.03 348.158 cv
183.03 346.094 184.421 344.832 185.861 344.832 cv
cp
f
191.602 350.6 mo
192.214 350.6 192.721 350.303 193.331 349.756 cv
193.331 348.002 li
191.214 348.264 190.498 348.781 190.498 349.588 cv
190.498 350.303 190.98 350.6 191.602 350.6 cv
cp
193.331 347.301 mo
193.331 346.494 193.058 345.715 192.031 345.715 cv
191.291 345.715 190.642 346.053 190.147 346.393 cv
189.719 345.652 li
190.304 345.273 191.188 344.832 192.199 344.832 cv
193.745 344.832 194.395 345.859 194.395 347.432 cv
194.395 351.303 li
193.513 351.303 li
193.422 350.549 li
193.395 350.549 li
192.784 351.045 192.085 351.457 191.306 351.457 cv
190.239 351.457 189.446 350.797 189.446 349.666 cv
189.446 348.289 190.642 347.6 193.331 347.301 cv
cp
f
196.408 344.988 mo
197.291 344.988 li
197.382 346.131 li
197.423 346.131 li
197.85 345.34 198.499 344.832 199.213 344.832 cv
199.487 344.832 199.681 344.871 199.889 344.963 cv
199.681 345.898 li
199.474 345.832 199.33 345.793 199.071 345.793 cv
198.539 345.793 197.901 346.184 197.473 347.248 cv
197.473 351.303 li
196.408 351.303 li
196.408 344.988 li
cp
f
203.355 344.832 mo
204.188 344.832 204.772 345.184 205.201 345.584 cv
204.669 346.273 li
204.292 345.951 203.902 345.715 203.395 345.715 cv
202.253 345.715 201.422 346.705 201.422 348.158 cv
201.422 349.602 202.214 350.572 203.371 350.572 cv
203.966 350.572 204.474 350.275 204.851 349.939 cv
205.33 350.641 li
204.76 351.146 204.032 351.457 203.28 351.457 cv
201.603 351.457 200.316 350.25 200.316 348.158 cv
200.316 346.041 201.732 344.832 203.355 344.832 cv
cp
f
206.706 342.055 mo
207.771 342.055 li
207.771 344.572 li
207.733 345.873 li
208.331 345.303 208.966 344.832 209.836 344.832 cv
211.163 344.832 211.759 345.689 211.759 347.301 cv
211.759 351.303 li
210.694 351.303 li
210.694 347.443 li
210.694 346.264 210.33 345.756 209.499 345.756 cv
208.85 345.756 208.409 346.094 207.771 346.727 cv
207.771 351.303 li
206.706 351.303 li
206.706 342.055 li
cp
f
214.33 349.818 mo
214.746 349.818 215.097 350.16 215.097 350.65 cv
215.097 351.119 214.746 351.457 214.33 351.457 cv
213.902 351.457 213.551 351.119 213.551 350.65 cv
213.551 350.16 213.902 349.818 214.33 349.818 cv
cp
f
217.564 349.818 mo
217.98 349.818 218.331 350.16 218.331 350.65 cv
218.331 351.119 217.98 351.457 217.564 351.457 cv
217.137 351.457 216.785 351.119 216.785 350.65 cv
216.785 350.16 217.137 349.818 217.564 349.818 cv
cp
f
220.797 349.818 mo
221.213 349.818 221.565 350.16 221.565 350.65 cv
221.565 351.119 221.213 351.457 220.797 351.457 cv
220.367 351.457 220.02 351.119 220.02 350.65 cv
220.02 350.16 220.367 349.818 220.797 349.818 cv
cp
f
160.284 261.125 mo
159.149 260.014 li
175.561 243.238 li
190.381 256.436 li
205.61 235.164 li
236.095 250.271 li
251.121 203.184 li
266.79 225.201 li
281.461 207.127 li
296.747 219.777 li
327.095 173.732 li
342.399 167.023 li
343.036 168.475 li
328.163 174.998 li
297.101 222.129 li
281.684 209.371 li
266.705 227.824 li
251.669 206.693 li
237.046 252.518 li
206.116 237.187 li
190.64 258.795 li
175.637 245.434 li
160.284 261.125 li
1 1 1 rgb
f
163.965 260.57 mo
163.965 262.85 162.119 264.697 159.84 264.697 cv
157.561 264.697 155.711 262.85 155.711 260.57 cv
155.711 258.293 157.561 256.443 159.84 256.443 cv
162.119 256.443 163.965 258.293 163.965 260.57 cv
cp
.839216 .309804 .203922 rgb
f
159.84 256.975 mo
157.855 256.975 156.238 258.586 156.238 260.57 cv
156.238 262.557 157.855 264.17 159.84 264.17 cv
161.823 264.17 163.438 262.557 163.438 260.57 cv
163.438 258.586 161.823 256.975 159.84 256.975 cv
cp
159.84 265.227 mo
157.271 265.227 155.182 263.139 155.182 260.57 cv
155.182 258.002 157.271 255.912 159.84 255.912 cv
162.407 255.912 164.497 258.002 164.497 260.57 cv
164.497 263.139 162.407 265.227 159.84 265.227 cv
cp
1 1 1 rgb
f
179.748 245.369 mo
179.748 247.65 177.901 249.496 175.622 249.496 cv
173.34 249.496 171.493 247.65 171.493 245.369 cv
171.493 243.09 173.34 241.24 175.622 241.24 cv
177.901 241.24 179.748 243.09 179.748 245.369 cv
cp
.839216 .309804 .203922 rgb
f
175.622 241.77 mo
173.636 241.77 172.022 243.383 172.022 245.369 cv
172.022 247.352 173.636 248.965 175.622 248.965 cv
177.604 248.965 179.219 247.352 179.219 245.369 cv
179.219 243.383 177.604 241.77 175.622 241.77 cv
cp
175.622 250.025 mo
173.051 250.025 170.966 247.938 170.966 245.369 cv
170.966 242.801 173.051 240.713 175.622 240.713 cv
178.187 240.713 180.278 242.801 180.278 245.369 cv
180.278 247.938 178.187 250.025 175.622 250.025 cv
cp
1 1 1 rgb
f
194.547 256.443 mo
194.547 258.725 192.697 260.57 190.418 260.57 cv
188.139 260.57 186.29 258.725 186.29 256.443 cv
186.29 254.166 188.139 252.316 190.418 252.316 cv
192.697 252.316 194.547 254.166 194.547 256.443 cv
cp
.839216 .309804 .203922 rgb
f
190.418 252.846 mo
188.435 252.846 186.821 254.461 186.821 256.443 cv
186.821 258.428 188.435 260.041 190.418 260.041 cv
192.401 260.041 194.015 258.428 194.015 256.443 cv
194.015 254.461 192.401 252.846 190.418 252.846 cv
cp
190.418 261.1 mo
187.85 261.1 185.762 259.01 185.762 256.443 cv
185.762 253.877 187.85 251.785 190.418 251.785 cv
192.985 251.785 195.072 253.877 195.072 256.443 cv
195.072 259.01 192.985 261.1 190.418 261.1 cv
cp
1 1 1 rgb
f
210.484 237.113 mo
210.484 239.393 208.637 241.24 206.356 241.24 cv
204.077 241.24 202.23 239.393 202.23 237.113 cv
202.23 234.836 204.077 232.986 206.356 232.986 cv
208.637 232.986 210.484 234.836 210.484 237.113 cv
cp
.839216 .309804 .203922 rgb
f
206.356 233.518 mo
204.373 233.518 202.761 235.133 202.761 237.113 cv
202.761 239.1 204.373 240.713 206.356 240.713 cv
208.343 240.713 209.956 239.1 209.956 237.113 cv
209.956 235.133 208.343 233.518 206.356 233.518 cv
cp
206.356 241.77 mo
203.789 241.77 201.699 239.682 201.699 237.113 cv
201.699 234.547 203.789 232.455 206.356 232.455 cv
208.927 232.455 211.013 234.547 211.013 237.113 cv
211.013 239.682 208.927 241.77 206.356 241.77 cv
cp
1 1 1 rgb
f
240.455 250.756 mo
240.455 253.035 238.606 254.885 236.328 254.885 cv
234.048 254.885 232.199 253.035 232.199 250.756 cv
232.199 248.479 234.048 246.631 236.328 246.631 cv
238.606 246.631 240.455 248.479 240.455 250.756 cv
cp
.839216 .309804 .203922 rgb
f
236.328 247.16 mo
234.344 247.16 232.73 248.773 232.73 250.756 cv
232.73 252.742 234.344 254.355 236.328 254.355 cv
238.311 254.355 239.925 252.742 239.925 250.756 cv
239.925 248.773 238.311 247.16 236.328 247.16 cv
cp
236.328 255.412 mo
233.759 255.412 231.67 253.324 231.67 250.756 cv
231.67 248.189 233.759 246.098 236.328 246.098 cv
238.896 246.098 240.984 248.189 240.984 250.756 cv
240.984 253.324 238.896 255.412 236.328 255.412 cv
cp
1 1 1 rgb
f
255.101 205.363 mo
255.101 207.639 253.251 209.492 250.973 209.492 cv
248.693 209.492 246.847 207.639 246.847 205.363 cv
246.847 203.08 248.693 201.234 250.973 201.234 cv
253.251 201.234 255.101 203.08 255.101 205.363 cv
.839216 .309804 .203922 rgb
f
250.973 201.764 mo
248.989 201.764 247.373 203.377 247.373 205.363 cv
247.373 207.346 248.989 208.959 250.973 208.959 cv
252.957 208.959 254.573 207.346 254.573 205.363 cv
254.573 203.377 252.957 201.764 250.973 201.764 cv
250.973 210.018 mo
248.407 210.018 246.314 207.932 246.314 205.363 cv
246.314 202.795 248.407 200.705 250.973 200.705 cv
253.541 200.705 255.63 202.795 255.63 205.363 cv
255.63 207.932 253.541 210.018 250.973 210.018 cv
1 1 1 rgb
f
270.344 225.939 mo
270.344 228.221 268.498 230.068 266.215 230.068 cv
263.939 230.068 262.09 228.221 262.09 225.939 cv
262.09 223.66 263.939 221.812 266.215 221.812 cv
268.498 221.812 270.344 223.66 270.344 225.939 cv
.839216 .309804 .203922 rgb
f
266.215 222.34 mo
264.235 222.34 262.619 223.953 262.619 225.939 cv
262.619 227.924 264.235 229.537 266.215 229.537 cv
268.201 229.537 269.815 227.924 269.815 225.939 cv
269.815 223.953 268.201 222.34 266.215 222.34 cv
266.215 230.598 mo
263.65 230.598 261.561 228.508 261.561 225.939 cv
261.561 223.371 263.65 221.283 266.215 221.283 cv
268.784 221.283 270.872 223.371 270.872 225.939 cv
270.872 228.508 268.784 230.598 266.215 230.598 cv
1 1 1 rgb
f
285.612 209.492 mo
285.612 211.768 283.764 213.615 281.485 213.615 cv
279.205 213.615 277.356 211.768 277.356 209.492 cv
277.356 207.211 279.205 205.363 281.485 205.363 cv
283.764 205.363 285.612 207.211 285.612 209.492 cv
.839216 .309804 .203922 rgb
f
281.485 205.893 mo
279.502 205.893 277.889 207.506 277.889 209.492 cv
277.889 211.473 279.502 213.088 281.485 213.088 cv
283.471 213.088 285.085 211.473 285.085 209.492 cv
285.085 207.506 283.471 205.893 281.485 205.893 cv
281.485 214.148 mo
278.917 214.148 276.828 212.059 276.828 209.492 cv
276.828 206.922 278.917 204.834 281.485 204.834 cv
284.053 204.834 286.143 206.922 286.143 209.492 cv
286.143 212.059 284.053 214.148 281.485 214.148 cv
1 1 1 rgb
f
301.348 220.258 mo
301.348 222.539 299.498 224.385 297.22 224.385 cv
294.939 224.385 293.092 222.539 293.092 220.258 cv
293.092 217.979 294.939 216.129 297.22 216.129 cv
299.498 216.129 301.348 217.979 301.348 220.258 cv
.839216 .309804 .203922 rgb
f
297.22 216.66 mo
295.234 216.66 293.62 218.273 293.62 220.258 cv
293.62 222.24 295.234 223.853 297.22 223.853 cv
299.205 223.853 300.816 222.24 300.816 220.258 cv
300.816 218.273 299.205 216.66 297.22 216.66 cv
297.22 224.914 mo
294.652 224.914 292.563 222.824 292.563 220.258 cv
292.563 217.689 294.652 215.602 297.22 215.602 cv
299.788 215.602 301.875 217.689 301.875 220.258 cv
301.875 222.824 299.788 224.914 297.22 224.914 cv
1 1 1 rgb
f
331.518 175.205 mo
331.518 177.484 329.668 179.33 327.387 179.33 cv
325.109 179.33 323.261 177.484 323.261 175.205 cv
323.261 172.926 325.109 171.072 327.387 171.072 cv
329.668 171.072 331.518 172.926 331.518 175.205 cv
cp
.839216 .309804 .203922 rgb
f
327.387 171.605 mo
325.405 171.605 323.793 173.219 323.793 175.205 cv
323.793 177.188 325.405 178.801 327.387 178.801 cv
329.373 178.801 330.985 177.188 330.985 175.205 cv
330.985 173.219 329.373 171.605 327.387 171.605 cv
cp
327.387 179.863 mo
324.82 179.863 322.729 177.77 322.729 175.205 cv
322.729 172.635 324.82 170.547 327.387 170.547 cv
329.953 170.547 332.043 172.635 332.043 175.205 cv
332.043 177.77 329.953 179.863 327.387 179.863 cv
cp
1 1 1 rgb
f
346.845 167.748 mo
346.845 170.027 344.999 171.875 342.719 171.875 cv
340.439 171.875 338.593 170.027 338.593 167.748 cv
338.593 165.467 340.439 163.621 342.719 163.621 cv
344.999 163.621 346.845 165.467 346.845 167.748 cv
cp
.839216 .309804 .203922 rgb
f
342.719 164.15 mo
340.736 164.15 339.12 165.764 339.12 167.748 cv
339.12 169.73 340.736 171.348 342.719 171.348 cv
344.703 171.348 346.316 169.73 346.316 167.748 cv
346.316 165.764 344.703 164.15 342.719 164.15 cv
cp
342.719 172.404 mo
340.15 172.404 338.062 170.316 338.062 167.748 cv
338.062 165.182 340.15 163.09 342.719 163.09 cv
345.284 163.09 347.376 165.182 347.376 167.748 cv
347.376 170.316 345.284 172.404 342.719 172.404 cv
cp
1 1 1 rgb
f
342.534 152.475 mo
340.993 152.475 339.744 151.227 339.744 149.688 cv
339.744 148.148 340.993 146.898 342.534 146.898 cv
344.073 146.898 345.321 148.148 345.321 149.688 cv
345.321 151.227 344.073 152.475 342.534 152.475 cv
cp
342.534 144.895 mo
339.766 144.895 337.521 147.064 337.521 149.738 cv
337.521 152.414 342.534 159.93 342.534 159.93 cv
342.534 159.93 347.546 152.414 347.546 149.738 cv
347.546 147.064 345.299 144.895 342.534 144.895 cv
cp
.933333 .937255 .968627 rgb
f
158.324 244.934 mo
156.785 244.934 155.537 243.684 155.537 242.145 cv
155.537 240.607 156.785 239.357 158.324 239.357 cv
159.863 239.357 161.111 240.607 161.111 242.145 cv
161.111 243.684 159.863 244.934 158.324 244.934 cv
cp
158.324 237.354 mo
155.556 237.354 153.31 239.523 153.31 242.197 cv
153.31 244.875 158.324 252.389 158.324 252.389 cv
158.324 252.389 163.336 244.875 163.336 242.197 cv
163.336 239.523 161.091 237.354 158.324 237.354 cv
cp
f
272.388 253.922 mo
263.79 253.922 255.197 250.635 248.682 244.07 cv
246.104 241.471 244.042 238.551 242.495 235.441 cv
245.054 227.424 li
245.37 228.705 245.782 229.973 246.291 231.217 cv
246.873 232.627 248.222 233.473 249.651 233.473 cv
250.111 233.473 250.579 233.386 251.033 233.201 cv
252.875 232.447 253.768 230.324 253.003 228.467 cv
250.587 222.564 251.17 215.921 254.29 210.377 cv
262.983 222.593 li
262.107 223.44 261.561 224.627 261.561 225.939 cv
261.561 228.508 263.65 230.598 266.215 230.598 cv
268.784 230.598 270.872 228.508 270.872 225.939 cv
270.872 225.055 270.625 224.229 270.196 223.524 cv
278.613 213.154 li
279.404 213.777 280.402 214.148 281.485 214.148 cv
283.005 214.148 284.357 213.417 285.207 212.287 cv
292.861 218.62 li
292.669 219.13 292.563 219.682 292.563 220.258 cv
292.563 222.824 294.652 224.914 297.22 224.914 cv
299.788 224.914 301.875 222.824 301.875 220.258 cv
301.875 218.971 301.351 217.805 300.506 216.962 cv
304.423 211.018 li
307.795 222.432 304.952 235.301 295.922 244.25 cv
289.413 250.701 280.898 253.922 272.388 253.922 cv
241.516 233.282 mo
236.518 221.125 238.986 206.612 248.862 196.812 cv
255.37 190.364 263.885 187.143 272.395 187.143 cv
281 187.143 289.6 190.435 296.121 197.01 cv
299.635 200.55 302.191 204.685 303.79 209.092 cv
299.206 216.047 li
298.603 215.761 297.93 215.602 297.22 215.602 cv
295.804 215.602 294.533 216.237 293.678 217.238 cv
285.944 210.837 li
286.073 210.411 286.143 209.96 286.143 209.492 cv
286.143 206.922 284.053 204.834 281.485 204.834 cv
278.917 204.834 276.828 206.922 276.828 209.492 cv
276.828 210.398 277.088 211.244 277.538 211.96 cv
269.134 222.313 li
268.335 221.669 267.319 221.283 266.215 221.283 cv
265.531 221.283 264.882 221.431 264.297 221.698 cv
255.195 208.908 li
256.274 207.298 257.581 205.803 259.104 204.475 cv
260.613 203.162 260.777 200.871 259.442 199.356 cv
258.734 198.537 257.728 198.117 256.715 198.117 cv
255.866 198.117 255.012 198.411 254.322 199.012 cv
253.627 199.619 252.966 200.253 252.34 200.91 cv
251.907 200.777 251.448 200.705 250.973 200.705 cv
248.407 200.705 246.314 202.795 246.314 205.363 cv
246.314 206.414 246.664 207.383 247.254 208.163 cv
244.795 213.12 243.803 218.659 244.448 224.094 cv
241.516 233.282 li
.411765 .552941 .776471 rgb
f
242.495 235.441 mo
242.142 234.73 241.816 234.011 241.516 233.282 cv
244.448 224.094 li
244.581 225.21 244.782 226.323 245.054 227.424 cv
242.495 235.441 li
270.196 223.524 mo
269.914 223.062 269.554 222.652 269.134 222.313 cv
277.538 211.96 li
277.825 212.418 278.189 212.822 278.613 213.154 cv
270.196 223.524 li
262.983 222.593 mo
254.29 210.377 li
254.571 209.878 254.873 209.388 255.195 208.908 cv
264.297 221.698 li
263.808 221.92 263.364 222.224 262.983 222.593 cv
292.861 218.62 mo
285.207 212.287 li
285.532 211.856 285.784 211.366 285.944 210.837 cv
293.678 217.238 li
293.331 217.644 293.052 218.111 292.861 218.62 cv
300.506 216.962 mo
300.13 216.587 299.691 216.276 299.206 216.047 cv
303.79 209.092 li
304.021 209.728 304.232 210.371 304.423 211.018 cv
300.506 216.962 li
1 1 1 rgb
f
247.815 207.088 mo
247.533 206.575 247.373 205.988 247.373 205.363 cv
247.373 203.377 248.989 201.764 250.973 201.764 cv
251.159 201.764 251.342 201.778 251.52 201.805 cv
250.077 203.448 248.84 205.22 247.815 207.088 cv
.854902 .380392 .286274 rgb
f
247.254 208.163 mo
246.664 207.383 246.314 206.414 246.314 205.363 cv
246.314 202.795 248.407 200.705 250.973 200.705 cv
251.448 200.705 251.907 200.777 252.34 200.91 cv
252.06 201.203 251.786 201.502 251.52 201.805 cv
251.342 201.778 251.159 201.764 250.973 201.764 cv
248.989 201.764 247.373 203.377 247.373 205.363 cv
247.373 205.988 247.533 206.575 247.815 207.088 cv
247.62 207.443 247.433 207.801 247.254 208.163 cv
1 1 1 rgb
f
266.215 229.537 mo
264.235 229.537 262.619 227.924 262.619 225.939 cv
262.619 223.953 264.235 222.34 266.215 222.34 cv
268.201 222.34 269.815 223.953 269.815 225.939 cv
269.815 227.924 268.201 229.537 266.215 229.537 cv
.854902 .380392 .286274 rgb
f
266.215 230.598 mo
263.65 230.598 261.561 228.508 261.561 225.939 cv
261.561 224.627 262.107 223.44 262.983 222.593 cv
263.364 222.224 263.808 221.92 264.297 221.698 cv
264.882 221.431 265.531 221.283 266.215 221.283 cv
267.319 221.283 268.335 221.669 269.134 222.313 cv
269.554 222.652 269.914 223.062 270.196 223.524 cv
270.625 224.229 270.872 225.055 270.872 225.939 cv
270.872 228.508 268.784 230.598 266.215 230.598 cv
266.215 222.34 mo
264.235 222.34 262.619 223.953 262.619 225.939 cv
262.619 227.924 264.235 229.537 266.215 229.537 cv
268.201 229.537 269.815 227.924 269.815 225.939 cv
269.815 223.953 268.201 222.34 266.215 222.34 cv
1 1 1 rgb
f
281.485 213.088 mo
279.502 213.088 277.889 211.473 277.889 209.492 cv
277.889 207.506 279.502 205.893 281.485 205.893 cv
283.471 205.893 285.085 207.506 285.085 209.492 cv
285.085 211.473 283.471 213.088 281.485 213.088 cv
.854902 .380392 .286274 rgb
f
281.485 214.148 mo
280.402 214.148 279.404 213.777 278.613 213.154 cv
278.189 212.822 277.825 212.418 277.538 211.96 cv
277.088 211.244 276.828 210.398 276.828 209.492 cv
276.828 206.922 278.917 204.834 281.485 204.834 cv
284.053 204.834 286.143 206.922 286.143 209.492 cv
286.143 209.96 286.073 210.411 285.944 210.837 cv
285.784 211.366 285.532 211.856 285.207 212.287 cv
284.357 213.417 283.005 214.148 281.485 214.148 cv
281.485 205.893 mo
279.502 205.893 277.889 207.506 277.889 209.492 cv
277.889 211.473 279.502 213.088 281.485 213.088 cv
283.471 213.088 285.085 211.473 285.085 209.492 cv
285.085 207.506 283.471 205.893 281.485 205.893 cv
1 1 1 rgb
f
297.22 223.853 mo
295.234 223.853 293.62 222.24 293.62 220.258 cv
293.62 218.273 295.234 216.66 297.22 216.66 cv
299.205 216.66 300.816 218.273 300.816 220.258 cv
300.816 222.24 299.205 223.853 297.22 223.853 cv
.854902 .380392 .286274 rgb
f
297.22 224.914 mo
294.652 224.914 292.563 222.824 292.563 220.258 cv
292.563 219.682 292.669 219.13 292.861 218.62 cv
293.052 218.111 293.331 217.644 293.678 217.238 cv
294.533 216.237 295.804 215.602 297.22 215.602 cv
297.93 215.602 298.603 215.761 299.206 216.047 cv
299.691 216.276 300.13 216.587 300.506 216.962 cv
301.351 217.805 301.875 218.971 301.875 220.258 cv
301.875 222.824 299.788 224.914 297.22 224.914 cv
297.22 216.66 mo
295.234 216.66 293.62 218.273 293.62 220.258 cv
293.62 222.24 295.234 223.853 297.22 223.853 cv
299.205 223.853 300.816 222.24 300.816 220.258 cv
300.816 218.273 299.205 216.66 297.22 216.66 cv
1 1 1 rgb
f
248.682 244.07 mo
235.696 230.973 235.802 209.772 248.862 196.812 cv
261.95 183.844 283.15 183.932 296.121 197.01 cv
309.1 210.084 309.007 231.283 295.922 244.25 cv
282.837 257.219 261.646 257.133 248.682 244.07 cv
301.807 191.365 mo
285.735 175.139 259.442 175.039 243.224 191.121 cv
227.019 207.205 226.902 233.48 242.985 249.701 cv
257.763 264.596 281.11 265.891 297.404 253.551 cv
321.311 277.682 li
327.959 271.088 li
304.169 247.104 li
317.736 230.891 316.973 206.668 301.807 191.365 cv
f
377.938 309.65 mo
381.043 312.799 381.03 317.883 377.893 320.996 cv
372.194 326.641 li
369.058 329.754 363.972 329.732 360.847 326.584 cv
309.106 274.404 li
305.988 271.262 306.01 266.184 309.147 263.066 cv
314.846 257.426 li
317.988 254.305 323.062 254.334 326.182 257.465 cv
377.938 309.65 li
.964706 .72549 .168627 rgb
f
249.651 233.473 mo
248.222 233.473 246.873 232.627 246.291 231.217 cv
245.782 229.973 245.37 228.705 245.054 227.424 cv
250.613 210.004 li
250.731 210.013 250.851 210.018 250.973 210.018 cv
251.905 210.018 252.774 209.743 253.502 209.27 cv
254.29 210.377 li
251.17 215.921 250.587 222.564 253.003 228.467 cv
253.768 230.324 252.875 232.447 251.033 233.201 cv
250.579 233.386 250.111 233.473 249.651 233.473 cv
244.448 224.094 mo
243.803 218.659 244.795 213.12 247.254 208.163 cv
247.725 208.786 248.349 209.288 249.07 209.611 cv
244.448 224.094 li
255.195 208.908 mo
254.678 208.181 li
255.275 207.399 255.63 206.422 255.63 205.363 cv
255.63 203.271 254.243 201.495 252.34 200.91 cv
252.966 200.253 253.627 199.619 254.322 199.012 cv
255.012 198.411 255.866 198.117 256.715 198.117 cv
257.728 198.117 258.734 198.537 259.442 199.356 cv
260.777 200.871 260.613 203.162 259.104 204.475 cv
257.581 205.803 256.274 207.298 255.195 208.908 cv
.705882 .776471 .890196 rgb
f
245.054 227.424 mo
244.782 226.323 244.581 225.21 244.448 224.094 cv
249.07 209.611 li
249.547 209.826 250.067 209.962 250.613 210.004 cv
245.054 227.424 li
254.29 210.377 mo
253.502 209.27 li
253.954 208.977 254.352 208.608 254.678 208.181 cv
255.195 208.908 li
254.873 209.388 254.571 209.878 254.29 210.377 cv
1 1 1 rgb
f
250.973 208.959 mo
249.614 208.959 248.428 208.202 247.815 207.088 cv
248.84 205.22 250.077 203.448 251.52 201.805 cv
253.246 202.07 254.573 203.563 254.573 205.363 cv
254.573 207.346 252.957 208.959 250.973 208.959 cv
.929412 .690196 .643137 rgb
f
250.973 210.018 mo
250.851 210.018 250.731 210.013 250.613 210.004 cv
250.067 209.962 249.547 209.826 249.07 209.611 cv
248.349 209.288 247.725 208.786 247.254 208.163 cv
247.433 207.801 247.62 207.443 247.815 207.088 cv
248.428 208.202 249.614 208.959 250.973 208.959 cv
252.957 208.959 254.573 207.346 254.573 205.363 cv
254.573 203.563 253.246 202.07 251.52 201.805 cv
251.786 201.502 252.06 201.203 252.34 200.91 cv
254.243 201.495 255.63 203.271 255.63 205.363 cv
255.63 206.422 255.275 207.399 254.678 208.181 cv
254.352 208.608 253.954 208.977 253.502 209.27 cv
252.774 209.743 251.905 210.018 250.973 210.018 cv
1 1 1 rgb
f
372.895 304.57 mo
371.975 306.486 370.604 308.412 368.842 310.16 cv
359.262 319.668 li
358.342 320.588 357.354 321.381 356.368 322.068 cv
360.847 326.584 li
363.972 329.732 369.058 329.754 372.194 326.641 cv
377.893 320.996 li
381.03 317.883 381.043 312.799 377.938 309.65 cv
372.895 304.57 li
.839216 .309804 .203922 rgb
f
372.153 326.681 mo
372.153 326.681 li
372.167 326.668 372.181 326.654 372.194 326.641 cv
374.936 323.924 li
374.938 323.926 li
372.194 326.641 li
372.181 326.654 372.167 326.668 372.153 326.681 cv
.596078 .701961 .788235 rgb
f
366.555 328.961 mo
366.555 328.961 li
366.556 328.961 366.557 328.961 366.559 328.961 cv
366.559 328.961 li
366.557 328.961 366.556 328.961 366.555 328.961 cv
356.369 322.068 mo
309.106 274.404 li
307.553 272.839 306.779 270.794 306.781 268.75 cv
306.783 266.69 307.572 264.631 309.147 263.066 cv
309.147 263.066 li
311.412 260.824 li
364.959 314.014 li
359.262 319.668 li
358.342 320.588 357.354 321.381 356.369 322.068 cv
.937255 .607843 .145098 rgb
f
366.555 328.961 mo
364.488 328.961 362.419 328.168 360.847 326.584 cv
360.847 326.584 li
356.369 322.068 li
356.369 322.068 li
357.354 321.381 358.342 320.588 359.262 319.668 cv
364.959 314.014 li
374.938 323.926 li
372.194 326.641 li
372.181 326.654 372.167 326.668 372.153 326.681 cv
370.601 328.2 368.581 328.96 366.559 328.961 cv
366.557 328.961 366.556 328.961 366.555 328.961 cv
366.555 328.961 li
.815686 .258824 .172549 rgb
f
99.4834 116.5 mo
94.5537 115.746 91.1699 111.134 91.9248 106.203 cv
92.6797 101.273 97.2881 97.8862 102.219 98.6401 cv
107.152 99.396 110.538 104.007 109.783 108.937 cv
109.028 113.867 104.417 117.255 99.4834 116.5 cv
cp
117.325 112.261 mo
118.021 107.72 li
114.47 107.177 li
114.444 106.308 114.338 105.457 114.154 104.626 cv
117.536 103.308 li
115.865 99.0308 li
112.413 100.376 li
111.969 99.6636 111.462 98.9937 110.896 98.3745 cv
113.237 95.4507 li
109.654 92.5796 li
107.271 95.5542 li
106.557 95.1694 105.799 94.8472 105.008 94.5952 cv
105.589 90.7964 li
101.049 90.1011 li
100.459 93.9546 li
99.6436 93.978 98.8408 94.0718 98.0586 94.2339 cv
96.6377 90.5854 li
92.3574 92.2534 li
93.791 95.9272 li
93.1045 96.3452 92.459 96.8198 91.8584 97.3472 cv
88.7783 94.8843 li
85.9092 98.4663 li
88.9648 100.916 li
88.5732 101.613 88.2432 102.349 87.9785 103.121 cv
84.123 102.531 li
83.4277 107.072 li
87.2266 107.654 li
87.2334 108.482 87.3154 109.302 87.4648 110.099 cv
83.916 111.484 li
85.582 115.765 li
89.0732 114.402 li
89.4961 115.128 89.9824 115.812 90.5293 116.447 cv
88.21 119.341 li
91.7949 122.214 li
94.0615 119.382 li
94.8008 119.804 95.5801 120.162 96.4023 120.447 cv
95.8584 123.998 li
100.399 124.693 li
100.935 121.197 li
101.818 121.191 102.69 121.103 103.534 120.929 cv
104.811 124.207 li
109.09 122.539 li
107.819 119.273 li
108.572 118.826 109.282 118.304 109.935 117.718 cv
112.668 119.914 li
115.542 116.326 li
112.798 114.126 li
113.214 113.375 113.559 112.57 113.829 111.726 cv
117.325 112.261 li
cp
.921569 .423529 .0941176 rgb
f
102.216 98.5562 mo
97.2773 97.8003 92.6621 101.189 91.9063 106.126 cv
91.1504 111.064 94.5391 115.681 99.4775 116.437 cv
104.415 117.193 109.03 113.802 109.787 108.865 cv
110.543 103.927 107.152 99.312 102.216 98.5562 cv
cp
101.449 103.564 mo
103.617 103.896 105.111 105.929 104.779 108.099 cv
104.447 110.267 102.413 111.761 100.244 111.429 cv
98.0762 111.097 96.5811 109.062 96.9141 106.894 cv
97.2461 104.726 99.2803 103.232 101.449 103.564 cv
cp
.952941 .933333 .878431 rgb
f
294.728 157.424 mo
221.775 157.424 li
221.775 148.07 li
294.728 148.07 li
294.728 157.424 li
cp
.0745098 .14902 .25098 rgb
f
294.728 148.07 mo
221.775 148.07 li
221.775 104.424 li
294.728 104.424 li
294.728 148.07 li
cp
.921569 .423529 .0941176 rgb
f
258.252 116.977 mo
252.234 116.977 247.34 121.871 247.34 127.889 cv
247.34 133.904 252.234 138.8 258.252 138.8 cv
264.268 138.8 269.163 133.904 269.163 127.889 cv
269.163 121.871 264.268 116.977 258.252 116.977 cv
cp
258.252 139.424 mo
251.891 139.424 246.717 134.249 246.717 127.889 cv
246.717 121.528 251.891 116.354 258.252 116.354 cv
264.612 116.354 269.787 121.528 269.787 127.889 cv
269.787 134.249 264.612 139.424 258.252 139.424 cv
cp
.588235 .258824 .117647 rgb
f
255.758 123.836 mo
262.616 127.889 li
255.758 131.941 li
255.758 123.836 li
cp
f
225.412 151.096 mo
227.906 152.811 li
225.412 154.525 li
225.412 151.096 li
cp
.839216 .368627 .164706 rgb
f
283.162 153.122 mo
248.869 153.122 li
248.869 152.499 li
283.162 152.499 li
283.162 153.122 li
cp
.654902 .721569 .811765 rgb
f
248.869 153.122 mo
230.163 153.122 li
230.163 152.499 li
248.869 152.499 li
248.869 153.122 li
cp
.839216 .368627 .164706 rgb
f
285.469 153.238 mo
285.911 152.811 286.188 152.533 286.188 152.29 cv
286.188 152.123 286.095 152.016 285.925 152.016 cv
285.803 152.016 285.701 152.098 285.616 152.193 cv
285.457 152.033 li
285.602 151.879 285.746 151.79 285.963 151.79 cv
286.268 151.79 286.464 151.98 286.464 152.274 cv
286.464 152.557 286.202 152.847 285.889 153.178 cv
286.152 153.16 li
286.541 153.16 li
286.541 153.404 li
285.469 153.404 li
285.469 153.238 li
cp
.654902 .721569 .811765 rgb
f
286.851 153.025 mo
286.945 153.123 287.068 153.2 287.227 153.2 cv
287.399 153.2 287.52 153.11 287.52 152.961 cv
287.52 152.797 287.414 152.691 287.053 152.691 cv
287.053 152.481 li
287.363 152.481 287.467 152.375 287.467 152.229 cv
287.467 152.096 287.377 152.016 287.231 152.016 cv
287.107 152.016 287.011 152.075 286.914 152.165 cv
286.767 151.988 li
286.901 151.869 287.053 151.79 287.242 151.79 cv
287.547 151.79 287.756 151.938 287.756 152.208 cv
287.756 152.385 287.651 152.505 287.479 152.572 cv
287.479 152.582 li
287.666 152.632 287.809 152.767 287.809 152.976 cv
287.809 153.265 287.557 153.435 287.252 153.435 cv
286.996 153.435 286.826 153.335 286.714 153.21 cv
286.851 153.025 li
cp
f
288.277 153.046 mo
288.382 153.046 288.462 153.128 288.462 153.24 cv
288.462 153.352 288.382 153.435 288.277 153.435 cv
288.172 153.435 288.091 153.352 288.091 153.24 cv
288.091 153.128 288.172 153.046 288.277 153.046 cv
cp
288.277 152.193 mo
288.382 152.193 288.462 152.274 288.462 152.388 cv
288.462 152.5 288.382 152.582 288.277 152.582 cv
288.172 152.582 288.091 152.5 288.091 152.388 cv
288.091 152.274 288.172 152.193 288.277 152.193 cv
cp
f
289.364 152.774 mo
289.364 152.414 li
289.364 152.323 289.373 152.178 289.377 152.086 cv
289.367 152.086 li
289.237 152.333 li
288.948 152.774 li
289.364 152.774 li
cp
289.833 152.995 mo
289.634 152.995 li
289.634 153.404 li
289.364 153.404 li
289.364 152.995 li
288.664 152.995 li
288.664 152.802 li
289.292 151.819 li
289.634 151.819 li
289.634 152.774 li
289.833 152.774 li
289.833 152.995 li
cp
f
290.091 153.031 mo
290.186 153.121 290.303 153.2 290.462 153.2 cv
290.639 153.2 290.769 153.088 290.769 152.896 cv
290.769 152.707 290.652 152.599 290.477 152.599 cv
290.375 152.599 290.316 152.627 290.223 152.688 cv
290.086 152.602 li
290.134 151.819 li
290.98 151.819 li
290.98 152.062 li
290.382 152.062 li
290.35 152.444 li
290.56 152.393 li
290.831 152.393 291.057 152.546 291.057 152.889 cv
291.057 153.234 290.791 153.435 290.5 153.435 cv
290.243 153.435 290.075 153.332 289.959 153.215 cv
290.091 153.031 li
cp
f
113.536 216.221 mo
112.794 216.391 112.254 216.96 112.072 217.648 cv
103.705 217.631 li
103.684 217.458 li
103.446 216.421 102.688 215.645 101.75 215.323 cv
104.722 206.979 li
104.923 206.996 105.128 206.992 105.335 206.945 cv
106.399 206.702 107.064 205.643 106.821 204.578 cv
106.578 203.514 105.518 202.85 104.455 203.093 cv
103.391 203.335 102.725 204.395 102.969 205.459 cv
103.085 205.967 103.39 206.379 103.789 206.649 cv
100.76 215.157 li
100.553 215.16 100.343 215.182 100.133 215.229 cv
98.5361 215.594 97.5381 217.184 97.9033 218.779 cv
98.2676 220.375 99.8574 221.373 101.453 221.009 cv
102.656 220.734 103.518 219.764 103.714 218.619 cv
112.066 218.637 li
112.332 219.671 113.369 220.313 114.416 220.073 cv
115.479 219.83 116.146 218.771 115.903 217.707 cv
115.66 216.643 114.6 215.978 113.536 216.221 cv
cp
.862745 .905882 .921569 rgb
f
185.603 88.6797 mo
183.898 89.0879 182.612 90.4688 182.324 92.1973 cv
181.932 94.5635 183.536 96.8096 185.902 97.2031 cv
186.481 97.2988 187.063 97.2773 187.629 97.1436 cv
189.333 96.7344 190.619 95.3525 190.907 93.625 cv
191.301 91.2588 189.695 89.0146 187.329 88.6211 cv
186.749 88.5234 186.169 88.5449 185.603 88.6797 cv
cp
187.749 97.6406 mo
187.114 97.792 186.465 97.8154 185.817 97.707 cv
183.174 97.2676 181.379 94.7578 181.82 92.1143 cv
182.141 90.1826 183.579 88.6387 185.482 88.1816 cv
186.115 88.0293 186.766 88.0078 187.414 88.1143 cv
190.057 88.5547 191.852 91.0645 191.413 93.709 cv
191.091 95.6406 189.652 97.1836 187.749 97.6406 cv
cp
186.352 99.6006 mo
186.57 99.6035 li
187.002 99.6055 187.432 99.5664 187.849 99.4902 cv
188.061 99.4492 li
188.675 101.09 li
190.389 100.446 li
189.776 98.8105 li
189.964 98.7031 li
190.336 98.4873 190.689 98.2344 191.012 97.9531 cv
191.176 97.8105 li
192.525 98.9199 li
193.688 97.5068 li
192.334 96.3936 li
192.439 96.2061 li
192.65 95.8359 192.826 95.4404 192.962 95.0332 cv
193.031 94.8262 li
194.774 95.1172 li
195.075 93.3105 li
193.309 93.0176 li
193.306 92.8037 li
193.299 92.3809 193.252 91.959 193.166 91.5498 cv
193.121 91.334 li
194.822 90.6982 li
194.178 88.9834 li
192.448 89.6328 li
192.338 89.4512 li
192.125 89.0977 191.877 88.7637 191.606 88.458 cv
191.461 88.2949 li
192.65 86.8477 li
191.237 85.6855 li
190.029 87.1523 li
189.844 87.0498 li
189.49 86.8555 189.118 86.6924 188.738 86.5654 cv
188.531 86.4961 li
188.847 84.5996 li
187.041 84.2988 li
186.723 86.2178 li
186.509 86.2217 li
186.11 86.2275 185.714 86.2695 185.328 86.3447 cv
185.115 86.3867 li
184.429 84.5527 li
182.714 85.1953 li
183.405 87.04 li
183.221 87.1484 li
182.883 87.3486 182.56 87.5791 182.262 87.834 cv
182.1 87.9736 li
180.579 86.7227 li
179.416 88.1357 li
180.927 89.3799 li
180.818 89.5674 li
180.622 89.9102 180.454 90.2715 180.32 90.6445 cv
180.248 90.8457 li
178.33 90.5254 li
178.028 92.332 li
179.925 92.6475 li
179.923 92.8652 li
179.922 93.2686 179.955 93.6738 180.025 94.0693 cv
180.062 94.2773 li
178.283 94.9443 li
178.926 96.6582 li
180.681 96 li
180.788 96.1914 li
180.987 96.5459 181.224 96.8867 181.489 97.2051 cv
181.625 97.3691 li
180.452 98.7949 li
181.866 99.957 li
183.019 98.5566 li
183.207 98.668 li
183.569 98.8828 183.954 99.0635 184.349 99.2061 cv
184.551 99.2793 li
184.257 101.045 li
186.062 101.345 li
186.352 99.6006 li
cp
188.376 101.75 mo
187.731 100.029 li
187.42 100.078 187.104 100.105 186.785 100.113 cv
186.482 101.933 li
183.668 101.465 li
183.977 99.6133 li
183.689 99.499 183.408 99.3672 183.137 99.2168 cv
181.937 100.678 li
179.731 98.8652 li
180.964 97.3682 li
180.777 97.1328 180.606 96.8867 180.453 96.6328 cv
178.627 97.3184 li
177.625 94.6455 li
179.488 93.9473 li
179.445 93.6602 179.421 93.3711 179.413 93.0811 cv
177.439 92.7529 li
177.909 89.9375 li
179.913 90.2715 li
180.018 90.0088 180.137 89.75 180.27 89.502 cv
178.694 88.2051 li
180.509 86.002 li
182.096 87.3066 li
182.313 87.1318 182.54 86.9707 182.777 86.8203 cv
182.056 84.8965 li
184.728 83.8945 li
185.443 85.8037 li
185.721 85.7598 186.004 85.7285 186.286 85.7168 cv
186.62 83.709 li
189.436 84.1777 li
189.107 86.1523 li
189.377 86.252 189.646 86.3691 189.902 86.502 cv
191.167 84.9658 li
193.371 86.7783 li
192.131 88.2842 li
192.321 88.5137 192.5 88.7539 192.662 89.0049 cv
194.477 88.3242 li
195.479 90.998 li
193.709 91.6602 li
193.762 91.9629 193.797 92.2725 193.811 92.582 cv
195.664 92.8896 li
195.195 95.7051 li
193.376 95.4023 li
193.266 95.7002 193.136 95.9902 192.988 96.2695 cv
194.407 97.4365 li
192.595 99.6406 li
191.182 98.4785 li
190.937 98.6797 190.677 98.8652 190.406 99.0332 cv
191.048 100.746 li
188.376 101.75 li
cp
f
196.518 102.445 mo
195.395 102.716 194.545 103.626 194.355 104.767 cv
194.097 106.326 195.153 107.809 196.716 108.068 cv
197.098 108.132 197.48 108.119 197.855 108.028 cv
198.978 107.759 199.827 106.849 200.018 105.709 cv
200.276 104.147 199.218 102.667 197.656 102.406 cv
197.275 102.343 196.892 102.355 196.518 102.445 cv
cp
197.974 108.526 mo
197.533 108.633 197.082 108.647 196.631 108.572 cv
194.792 108.267 193.544 106.521 193.85 104.683 cv
194.074 103.339 195.073 102.266 196.398 101.947 cv
196.84 101.842 197.291 101.826 197.74 101.901 cv
199.58 102.207 200.827 103.953 200.523 105.791 cv
200.299 107.135 199.298 108.208 197.974 108.526 cv
cp
196.938 109.693 mo
197.156 109.695 li
197.443 109.698 197.729 109.672 198.008 109.621 cv
198.22 109.58 li
198.632 110.682 li
199.642 110.303 li
199.229 109.205 li
199.415 109.096 li
199.662 108.953 199.898 108.785 200.115 108.596 cv
200.277 108.454 li
201.185 109.199 li
201.869 108.367 li
200.96 107.619 li
201.067 107.434 li
201.208 107.187 201.323 106.923 201.414 106.651 cv
201.484 106.444 li
202.654 106.639 li
202.831 105.576 li
201.646 105.379 li
201.644 105.165 li
201.639 104.886 201.607 104.604 201.551 104.33 cv
201.506 104.115 li
202.646 103.687 li
202.269 102.678 li
201.108 103.113 li
200.998 102.932 li
200.854 102.697 200.693 102.474 200.511 102.271 cv
200.365 102.107 li
201.165 101.135 li
200.333 100.449 li
199.523 101.436 li
199.337 101.332 li
199.1 101.201 198.853 101.093 198.601 101.01 cv
198.393 100.939 li
198.606 99.6641 li
197.543 99.4873 li
197.329 100.777 li
197.116 100.779 li
196.85 100.783 196.586 100.813 196.329 100.861 cv
196.116 100.904 li
195.653 99.6719 li
194.645 100.05 li
195.108 101.289 li
194.925 101.398 li
194.7 101.529 194.485 101.685 194.285 101.854 cv
194.121 101.995 li
193.101 101.153 li
192.416 101.986 li
193.433 102.822 li
193.324 103.009 li
193.195 103.233 193.083 103.474 192.992 103.727 cv
192.919 103.929 li
191.631 103.713 li
191.454 104.776 li
192.729 104.988 li
192.728 105.206 li
192.726 105.473 192.748 105.742 192.795 106.009 cv
192.832 106.217 li
191.637 106.666 li
192.016 107.676 li
193.195 107.232 li
193.304 107.422 li
193.437 107.659 193.594 107.887 193.771 108.099 cv
193.906 108.262 li
193.119 109.219 li
193.952 109.902 li
194.727 108.961 li
194.916 109.073 li
195.155 109.217 195.412 109.337 195.675 109.432 cv
195.877 109.504 li
195.681 110.688 li
196.742 110.865 li
196.938 109.693 li
cp
198.333 111.34 mo
197.889 110.158 li
197.718 110.184 197.546 110.198 197.372 110.205 cv
197.164 111.454 li
195.092 111.109 li
195.303 109.836 li
195.146 109.773 194.995 109.701 194.848 109.622 cv
194.021 110.623 li
192.399 109.287 li
193.245 108.262 li
193.146 108.133 193.055 107.999 192.97 107.864 cv
191.717 108.333 li
190.979 106.367 li
192.259 105.887 li
192.238 105.731 192.226 105.576 192.219 105.422 cv
190.865 105.197 li
191.21 103.125 li
192.586 103.354 li
192.645 103.213 192.708 103.076 192.776 102.944 cv
191.697 102.056 li
193.03 100.434 li
194.12 101.329 li
194.236 101.238 194.357 101.151 194.48 101.07 cv
193.986 99.75 li
195.953 99.0137 li
196.444 100.322 li
196.593 100.301 196.742 100.285 196.893 100.275 cv
197.122 98.8984 li
199.194 99.2432 li
198.969 100.598 li
199.113 100.653 199.255 100.715 199.395 100.784 cv
200.263 99.7285 li
201.885 101.063 li
201.036 102.098 li
201.138 102.223 201.232 102.353 201.322 102.488 cv
202.568 102.02 li
203.307 103.986 li
202.092 104.441 li
202.118 104.607 202.138 104.775 202.146 104.943 cv
203.421 105.156 li
203.075 107.228 li
201.826 107.02 li
201.763 107.183 201.693 107.342 201.615 107.495 cv
202.589 108.298 li
201.255 109.919 li
200.284 109.121 li
200.147 109.23 200.005 109.332 199.858 109.426 cv
200.299 110.604 li
198.333 111.34 li
cp
f
171.425 97.1992 mo
170.301 97.4688 169.453 98.3799 169.264 99.5205 cv
169.004 101.083 170.063 102.563 171.623 102.822 cv
172.006 102.887 172.389 102.873 172.763 102.783 cv
173.887 102.514 174.734 101.602 174.925 100.463 cv
175.184 98.9014 174.125 97.4209 172.563 97.1602 cv
172.182 97.0967 171.799 97.1094 171.425 97.1992 cv
cp
172.882 103.281 mo
172.441 103.385 171.989 103.401 171.539 103.327 cv
169.7 103.021 168.452 101.275 168.758 99.4355 cv
168.981 98.0938 169.982 97.0195 171.306 96.7021 cv
171.745 96.5957 172.197 96.582 172.647 96.6563 cv
174.488 96.9619 175.736 98.707 175.43 100.547 cv
175.207 101.889 174.207 102.963 172.882 103.281 cv
cp
171.845 104.447 mo
172.063 104.451 li
172.348 104.453 172.636 104.427 172.915 104.375 cv
173.127 104.334 li
173.54 105.436 li
174.548 105.058 li
174.135 103.959 li
174.323 103.851 li
174.57 103.709 174.806 103.539 175.024 103.35 cv
175.188 103.209 li
176.092 103.954 li
176.777 103.121 li
175.869 102.374 li
175.976 102.188 li
176.114 101.941 176.23 101.678 176.322 101.406 cv
176.392 101.197 li
177.563 101.394 li
177.738 100.331 li
176.555 100.133 li
176.551 99.9199 li
176.547 99.6426 176.516 99.3613 176.458 99.084 cv
176.414 98.8691 li
177.556 98.4414 li
177.177 97.4326 li
176.016 97.8691 li
175.906 97.6855 li
175.765 97.4512 175.601 97.2285 175.418 97.0254 cv
175.271 96.8613 li
176.073 95.8887 li
175.241 95.2041 li
174.43 96.1895 li
174.244 96.0869 li
174.009 95.957 173.761 95.8467 173.508 95.7617 cv
173.301 95.6934 li
173.514 94.418 li
172.451 94.2422 li
172.236 95.5313 li
172.022 95.5332 li
171.756 95.5391 171.491 95.5664 171.236 95.6172 cv
171.023 95.6592 li
170.562 94.4258 li
169.552 94.8037 li
170.018 96.0439 li
169.832 96.1523 li
169.604 96.2861 169.391 96.4414 169.192 96.6084 cv
169.029 96.748 li
168.009 95.9063 li
167.323 96.7393 li
168.34 97.5762 li
168.232 97.7637 li
168.102 97.9893 167.989 98.2305 167.899 98.4824 cv
167.826 98.6816 li
166.537 98.4668 li
166.361 99.5293 li
167.637 99.7432 li
167.635 99.9609 li
167.634 100.23 167.655 100.499 167.703 100.764 cv
167.739 100.973 li
166.545 101.421 li
166.924 102.43 li
168.103 101.986 li
168.211 102.178 li
168.344 102.414 168.501 102.641 168.679 102.853 cv
168.814 103.016 li
168.028 103.973 li
168.86 104.658 li
169.634 103.715 li
169.823 103.828 li
170.063 103.971 170.319 104.091 170.584 104.186 cv
170.784 104.259 li
170.587 105.443 li
171.65 105.619 li
171.845 104.447 li
cp
173.239 106.094 mo
172.797 104.913 li
172.625 104.938 172.452 104.952 172.279 104.959 cv
172.07 106.209 li
169.999 105.863 li
170.21 104.59 li
170.056 104.527 169.901 104.455 169.754 104.377 cv
168.931 105.378 li
167.308 104.043 li
168.152 103.015 li
168.053 102.887 167.962 102.754 167.877 102.617 cv
166.625 103.088 li
165.886 101.12 li
167.167 100.641 li
167.146 100.487 167.133 100.332 167.127 100.178 cv
165.771 99.9521 li
166.117 97.8789 li
167.494 98.1084 li
167.551 97.9688 167.615 97.832 167.683 97.6992 cv
166.603 96.8105 li
167.938 95.1885 li
169.027 96.084 li
169.144 95.9922 169.265 95.9063 169.39 95.8252 cv
168.894 94.5039 li
170.86 93.7666 li
171.352 95.0762 li
171.5 95.0557 171.65 95.0391 171.801 95.0313 cv
172.029 93.6533 li
174.102 93.998 li
173.876 95.3516 li
174.021 95.4072 174.163 95.4697 174.303 95.5391 cv
175.171 94.4834 li
176.794 95.8193 li
175.943 96.8516 li
176.044 96.9785 176.142 97.1064 176.23 97.2422 cv
177.477 96.7734 li
178.214 98.7402 li
176.999 99.1973 li
177.026 99.3623 177.045 99.5313 177.055 99.6973 cv
178.327 99.9102 li
177.983 101.981 li
176.734 101.774 li
176.672 101.938 176.602 102.098 176.522 102.25 cv
177.497 103.053 li
176.162 104.673 li
175.192 103.876 li
175.055 103.986 174.913 104.088 174.765 104.18 cv
175.207 105.356 li
173.239 106.094 li
cp
f
309.92 76.7544 mo
307.77 76.7544 306.018 78.5039 306.018 80.6563 cv
306.018 92.2471 li
306.018 94.3994 307.77 96.1489 309.92 96.1489 cv
330.639 96.1489 li
339.074 105.097 li
339.074 96.1489 li
340.553 96.1489 li
342.704 96.1489 344.456 94.3994 344.456 92.2471 cv
344.456 80.6563 li
344.456 78.5039 342.704 76.7544 340.553 76.7544 cv
309.92 76.7544 li
cp
340.377 108.376 mo
330.076 97.4521 li
309.92 97.4521 li
307.049 97.4521 304.716 95.1177 304.716 92.2471 cv
304.716 80.6563 li
304.716 77.7871 307.049 75.4512 309.92 75.4512 cv
340.553 75.4512 li
343.422 75.4512 345.757 77.7871 345.757 80.6563 cv
345.757 92.2471 li
345.757 95.1177 343.422 97.4521 340.553 97.4521 cv
340.377 97.4521 li
340.377 108.376 li
cp
f
324.895 81.9619 mo
311.225 81.9619 li
311.225 80.6587 li
324.895 80.6587 li
324.895 81.9619 li
cp
f
320.988 85.2148 mo
311.225 85.2148 li
311.225 83.9146 li
320.988 83.9146 li
320.988 85.2148 li
cp
f
338.563 85.2148 mo
322.616 85.2148 li
322.616 83.9146 li
338.563 83.9146 li
338.563 85.2148 li
cp
f
329.451 90.4229 mo
322.616 90.4229 li
311.225 90.4229 li
311.225 91.7236 li
322.616 91.7236 li
329.451 91.7236 li
338.563 91.7236 li
338.563 90.4229 li
329.451 90.4229 li
cp
f
320.988 88.4707 mo
311.225 88.4707 li
311.225 87.1685 li
320.988 87.1685 li
320.988 88.4707 li
cp
f
338.563 88.4707 mo
334.331 88.4707 li
334.331 87.1685 li
338.563 87.1685 li
338.563 88.4707 li
cp
f
332.705 88.4707 mo
322.941 88.4707 li
322.941 87.1685 li
332.705 87.1685 li
332.705 88.4707 li
cp
f
334.007 81.9619 mo
326.847 81.9619 li
326.847 80.6587 li
334.007 80.6587 li
334.007 81.9619 li
cp
f
414.798 120.263 mo
417.563 120.345 420.047 120.889 420.117 120.887 cv
421.611 120.905 423.326 121.613 425.983 120.541 cv
428.641 119.467 437.416 113.547 437.416 113.547 cv
438.377 112.963 438.495 111.402 437.687 110.064 cv
437.418 109.625 li
436.604 108.285 435.165 107.672 434.205 108.259 cv
426.431 113.015 li
426.489 112.734 li
437.88 105.769 li
438.842 105.185 438.961 103.628 438.151 102.288 cv
437.878 101.85 li
437.068 100.509 435.629 99.896 434.668 100.48 cv
428.27 104.397 li
428.308 104.214 li
436.1 99.4468 li
437.061 98.8628 437.185 97.3047 436.371 95.9688 cv
436.103 95.5269 li
435.292 94.1865 433.854 93.5757 432.893 94.1597 cv
425.821 98.4849 li
425.734 98.3105 li
431.426 94.686 li
432.386 94.0996 432.504 92.541 431.695 91.2031 cv
431.427 90.7607 li
430.611 89.4224 429.175 88.8159 428.214 89.3975 cv
420.771 94.0688 li
420.521 94.1831 li
420.188 94.3799 419.924 94.6938 419.59 94.8887 cv
416.385 96.7778 415.431 96.752 414.432 95.0537 cv
414.432 95.0537 412.991 90.9912 411.385 87.126 cv
411.11 86.4668 410.789 85.8345 410.435 85.2246 cv
409.533 83.6963 408.042 81.6914 406.449 80.9365 cv
405.648 80.5566 404.191 80.7031 403.685 81.0005 cv
403.321 81.2148 402.688 82.0425 402.563 82.9595 cv
402.494 83.4414 402.693 83.9375 402.924 84.3271 cv
403.139 84.6958 403.842 85.2085 404.131 85.6504 cv
404.267 85.875 li
405.25 87.5762 li
409.197 94.2656 405.375 102.475 402.543 104.141 cv
402.5 104.167 li
398.839 106.776 396.698 108.033 395.629 108.662 cv
404.762 124.169 li
404.762 124.169 410.245 121.341 410.543 121.163 cv
411.89 120.371 413.587 120.227 414.798 120.263 cv
cp
f
405.396 125.237 mo
400.579 128.071 li
390.506 110.962 li
395.316 108.128 li
405.396 125.237 li
cp
.458824 .0666667 .0666667 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.2.0
%%For: (andrey) ()
%%Title: (nov45-04.eps)
%%CreationDate: 11/26/2014 10:22 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBjVOso)Ja[q0^J7L^T(A@J0k$$%sE>"9E]\LL^IKChE2Wmt9M5s&\kOh(t7*5eTb!\`^!^SY#,LlKVQ!RtZQup7PEf[k>,C
%s/tHWh9g6n[\i.[#Cb,#rbGs$H2T/XN@e.H<sHpReN`E/.q,Wjh/9U3]sZYhc_-QX%kcd3OS]SI)XW#p>E,:r"n*0!m'BU'&XM/,
%B$ejaH&[@:)0u$P&)I?hpbTbBZb7\Na'l^n%0>1YhP8mY\Oo-/IuBpo>sgi!D<KEV%/AG+J*g1de`jh,rmC5uc]=/]@F(Xt*f$;Z
%)t`I`(0%Z,e)A&1GaL"9[:%AFe+Vjs;Xe2r;%?/KjUO>-oZ15H1dWSiC$\(\S*gT5s0n`_s.a&FTC?J<BBCaKcf&:ElS)uQkQ/k]
%`s-lV:K2kc,&&;ppEXQu)F6T`?"rP,hTi5?2ZBKL`f!1pZ!Q%A]P74KDT-V']^OoT=**u+!DkQQfGfr&KKnb\5ARgm@8IEFXN(_)
%rc.m$d'KZ8n;"hMK1=LAe#N..I$B^g4(Q*3%3**#oQmJKORAIF-%E66-UIJNm"<Tl)[#Gf[@AUZGr99$K:a<%VTpYOk_-(%p05sA
%_f<nj@9_A[[LW=NRYs=`j:*oCRrV;FRRdEckCd.-UdNMYK5UX^hHI6:&=DQ5*T$27X-!bTRe2**SbJpE56&Nh$B4`V@>hU#2pSl+
%V;\*/pQ)TISQ9mFh8CAuiNHH/Zi\6<UOBtM7_b$t5[r)KbRi_!<?#8C[ug+:J%_T&]X,Mq!$:QOgOmdXX4I:IYJii9I3.P-L6[5"
%$[l4'*LqV3?QS;E:JJ_d2'))6[,@"?dm(910c60&N(VPWn9L$XY[$leO']3_G8kLjQ>p3'/aCLap!0<eN<>Sk_]4(3muh&:h\uK`
%jaA!?@%JPDVl"(Qp0bL;/S^cW,9mt6!rd=9p_j(@<fYV^C&J;Vm1.^nJ'8(uC@5BSm:9qS@3]Fhh&L_0MbU_i08#d#PBDo8=g"6h
%SUnQ69;HVsDr$,9bOlt(RK,/i;mTn7FJ-t$9;IMS@;Gu/;5U@Fr[%?+YZ:)h\q"mh^.8BZs4Y,uO9)I59?W?F2UC-;HETooV6dVO
%Z6rAN,(4YD2L%(+AkEDZ,XWk*N>%j@NP&c]"$IG03C;8h-'1]V@C?B"&Ilo3hgX3p*OMc<]7\sOm\JZVr49*A1U7!K)GC1B'Soea
%#236+2OF%=\-1NYrs]H+iSW@8SQT:N?lE_*"qlOZf!EqG#E;4OU)S2,l]pANJ0ETMDKAOoK3GADga;:@*fjiL8:*-1X9ogoE@uC:
%iKE:H^Uo_?oI,r6DK%.EYF%kJmru<^18ko6'IBcl<=NN:-b!$V6i8^X'ojhdr(k\C>is3%o5;pWLLV;7.WqlMK$ZT'4K/!A)OBWf
%==imqR7O:NYTsZg>3ME,I3`'\#Y3.DcQKlb_oJ%-Z%8aSd>,b\G9IplA"p1WIa5(3Dt!GDY942q58WW#%-iK5cS:L3F,U&V)_H<E
%!]'/ocNjC[Jq@P^=Qjp\GaZ]c]i"0O/Q0I,XmWUnd6mi4rt>JnGds\(4NacI"3K,J>3&3#(pGdq%Oog5R^<2u9j9EU/H!`-_U$?/
%!4c5:-N9uGqj/0;@HFAUREMg`ES8[R%50[iG1n2NPidqEo2[*RSP0#o?r/:8.4u!TBAiG?m`_Z`['VW;4Lauu"t$V%E]+-!bs_71
%h=C[.7[7r*/Eg;JV'1XjKHXhf+0@j#T[F@"KNT!k/j(j9OOrjhCn1gEYga,s&"kkf\:du[8MSh3+8>(4/<+;H8'9dIB9nQV8l(=)
%*+%YCl\<)=,E'1l"Z%'d@;XRc[<]Ce#Z&GX%B7UI,sRMe_<JdU9X[#k2h8\-6`3=@Vd%@0X^SY8nRYg;;N)U)#Mi"^9@MfM*+`Sm
%io=U^h<_Lq,dGNH>lIPM80Bh)!NX2DQ<TtoG#Q5o4L:M8B',N;9Or=t4L;)2"3=[bYM/[+D9;0#o]ckIFr=m8k,I0![@=(;o@.ZL
%g<ER.gRd-P\CiQOY^2PU?V"bkiV9#Ua(*kt/A?h\3+M:J)Vb"[ZTTFY)[5,Sj01<1'cI]N1tt5M7.?iLNGNphQt/V;b.pVGW=53t
%h"mOl+h@*<f]n3^7Z_0f/Z;_9\4&.\?_Zb[\AF4M[<cVuF&V)R:)NV]K.Klb<-D0@ofA(Y(/:k5N=,)hcbNO[FAbelF,@1DnsWnt
%%`U#o>(0?hl<4DKWgT*U3_AuP)ZKq)1U$pP@6`sf9HRujM02Nf?T5?^DSt@8%fWQIcg^BaT"l2h.JY\kSAP_0Cq_5`\"/9jRIV.p
%DPARRd&K#\3SGq+p>%859@[MHUJ=R7AXZbbMbc64/i5VU_=,X5-c4,RA#M]m`JLlLB'4AN-%B\/@Q,.rHM*r=24U`3[K3jT`p_Up
%AQ(hdQZ9r;],dsAWP4#$0KV/0'E?[RaIG.=OC?#qC=qgFg_j4-@M*\d*m?/tQkPF=1[m)W:PB%%])*Y/c+TR=aUPiSradnPBCR*#
%kT)I7``)=FYNJksb"$%\8,onjEY]H8Y1^:jZ@]\1FtZ/rjs4#IBe/=]aR_:Mq&8hm?:3"W,&FuJ/C\7FL-/g1T!';M@1?;"K+&Dt
%o/5Ujq&8fG8F^WU)DVWRE#%'Qeh`&"o6'(",u4&Sj8$:V1b9Tjf8V.3pi"![EJ=iYH@p)E,4]6"b-JrEC@R.72d(o0<jn7@;p87L
%?E4N]iHDg:;+rKu77b'G.IMYJlaFj?fYA`N:gg,OpFU%90`JqRgV.Cr85*H0O]0EHd<p[BjN$j0ZM=p^I"q!;G(qQ3'>=Y!AG1D>
%CeCVIBXkR$d1+"E3eUPm3nTPj7=4u'^"itkleSeVhX1TMTaT$7q6Tnpfrt%%P@7oYCqss,B@!BZ'/Oi=#+gGHe=2(aG?Kcc':u'M
%ek'U\c?<pPnt0_(8MnT6H-W5>lPWY)^OZGpEq^L$&BS!#kOZ#9\FXVDZA`QR(qh]T%*mk6+1V7Eo[1$A+7X>)dISU3AlRq,0Ct$e
%q8CI(iak=D17rfZp5'SDbsEdafIRH!J!j*FbU6`Z'/.fmnM3*XFaNiX9[*^g0h\*MH3WW"?<2&mNoOFr7A!@89[Y]@0<Dsh-[B,h
%(*9@O_MTn24\Ya,'j:BAIUU3K(sBY2DYh',+2#L>6Etk:0W5Lf_jW[-.5kkgmMtE!3DG9MSDWHc`Qn"Bl.4?GaQsCJApiY:(8oo0
%MpjQ[Faetlr!'&jWTf:h$U4*LNJVBLaK'`Y54Y/!RJB?Z3J5e',FIl&MnU0Wq%qlnAioM/ZKP:sGS?HUd!tRt0Ul>ejpoSAreF6.
%B)$W9$t"=#HR>TOf3\B0_=sjZ]U?P.,(gW/Ar3Of'+CqIn;nrpW_P7J\g:S7gU13<m,MdCL=M7;!+s5m;<DbWnN%N+cZGYY>,0oV
%dZ)"WkDc-T[@X-i]+\0/rL[k/5#Zk#1Y\<=>&I5aQZ7NHb`&<Ur63;;.\YkHj=%T^gWscsIV)t*+mXZH7gB^7C;%f`gAYa^G1j=W
%hD]CX:\W0'oP;_,SUUTDAia$R5Ee7FdVjT2h]EG`EsiLOR2K8bX<!Uq_"V"2<;8:-Vkn:MFZUJ8\XC0Kk8MqYc/`_'[l#.tLNYHc
%g.fQN[qRXuo:TbTJtdNao\1<?5=%Jm;u#qtjDuD(+j2^sPMN_,OPKa:q/dU>S"Cgq@LkI`5sE!]EINLemMmV==Jjn7c;0PJS`B>f
%-o9d(DrD#n\So,\#KUhlk;'ZP:9nB5GER@-HKNQ+NnNZX5MD!_e;.9eW:Y_^X*-X!r^bocWu$Bc/Beo+\W=t?#G<qf*^DCXaE1Xr
%>^0.?jg>L)Ep#_A/9Sl!K<S@tE`atqIT!hdg;j/<^G9UK;)rHGj\G*#9`:iQSeQ5nKC8Q.!<UPS/7pJG)p?uX>OlA+j>(!/0G??L
%cY;a\[%@IVT%f\/Lr+:(f$ld`?$Nt?@`R%.>7#>?B7JE5Rr1$%].`ui/Q(Dt57oir0f8KGA?=R@9/9O'`8FRD9?*TnAXWld#QLXl
%Y`g(*1OR<_XkR'('7H@$23ManT2TY@E%(fL#SVmGB+/C!'7lb$Ee7j<_s-K$h+S9P%&XDED%t6B5^hAqpA8%G/_.HHSH"tb*ps9r
%=aG9=Ag`RCL.)usnCt%nO%SXC>EdL.<B6L>1NJtL/FV`.ghg-!h78tK>0Z]oDp5X:\iGG>3-`aJU`6[e[4GZmQpR@YF]0C65%lYC
%ZQ@^+4D,juVO]Qs8:!JmOk)U)b?L[fQtJB;e^sU4b<N>Pndi.d<dd*pJ*=3m]$!8BA$N5Oi$VqgKY4emo"/,9o=+:[5?Tr&nGCs8
%q.3\WR;_kk^(%iB5I=TL[ERELZel4]m2m2S4ui%?Z$jjB2^W6>g^L?dS],TVVqa8_]'X*qrZK0,B*qi\<%FnH#0fFYaHH?KKdXi?
%2s`AQ//tpJC:2p%%ins`?_Zb[\>m$<@BJD/FAjJV+:S+c/??s7fh&I"W40Vd_[VlrTMaB\B?=tdU6B%996_`J,-Uq[iF9GdWoYVI
%V*-@dP'<a7d_k>q2)&_A'E$(i$A:hGTURZ\U*VT"*e.c?,\Y_tR1/h^Ru!L*K3Ga+-0=je*mKorbfJl4obJG-;lAZ`K1ma5paKqT
%j3icQf/to2K76SLZLMGS-8"/CoK1Osa3r6gS/]$+$0Zlt!88\'gpOV#cH"]^*ci3r#]BO,b92E4R%'/IiF<@QP,m!8k%Ji[c*kUD
%)g9?]s3M>#+G+K-XUh_]r:>N($@o2M&X.:BSYc7HMe+9I4/:X!>dbU=M[V+JF3F=4/Y=i.Hl5=+[sW8?2n+1`Du!EBD.1)/A@^?%
%P4r-j@Nru"P6l+VdB+rnr)9e2qI10i2r2\_L=n`j,mmD)*?$"b>[SLmCS<9!"ZD>Z>ka1P:[eUlFd?Tcg+<gNk1<DR_B-X3hfkTu
%!uEbC9)^a(3gGDSBtncTQ@/Zg\u5N#NV+1'A4lgAmom_L$2=9\Z[EsaQCCu)R":Is-bG-h3<*O`gnp/2g<KP:f#fS2R[.AU:A^Q9
%Y%;'Pb%ES4N,3>.-Nb=fR<X[1fWNQ8>!:aWq-,0KVLDHSB#cZNOd!(@Z[JOcr.CLP&*DqtR"(2riaMgPcA?k1WV;;AY>tVK3QG8r
%K!-uZ4#>VUk$R,<iVrVIXdJP^RU6_NmJS$rXVrq!A2j`Qhl8F$Li'k+@k.HSI&k87X2Z4fi9/u$]?TTnTD=`-m%ag6ehaf.keoSb
%]61[<MJb*&Jpe,3R$dGM%_(cjL3]iFDZ&tKB[#p/c#Q^)5,0k&>\?6q0pSH:G7/">ZLBQ?d?rXXGLje3Hq%U0UG6UK1S<'^cY1PD
%N5dHZMrHYM7%rG6fo/VKb\&`/F#JYUm"oq'kk&NBN+P$hLYg/7](=Y^s'"cM]-:P[4plRNX>C(MC!GFFn=s+>r2WpUq,Jsc?FMRn
%SUX^L\dh?f[NgIY7a8#FSF\Babk&Mn^,OC4k5!l0o=YPuoPMqKDW/X+1[I;s_2L#L=7_)`T('u<^3RRS:\a&YhsF26<c5g8j\2.l
%V`j4lDc=r*]5F,<?cr1\HCmC`H2+RSZ/*UuqtrkUU7T]8M0o6(SJ_dnVL4Ti+52o=Xh=RLqsgR.d;+4,BPtiPB'^$:Q>&9aIqZ]2
%>'ZMTYQ%M7G8nhhgkOdY+X*5DnNDHik"cHU)?09N/R1cgUfl/1ehaDscJVl6L+%;\(-$_XJ`g1AQ^MhU'=\fc^7:VF'cE#`oWipD
%Bu8b*b+_ka^O1;W>j$A:[@/+Oop_$99P17K_fF`0A^G1GNT75T<jKsf-"!&SIn(C-FKa"tns'N.Rps(_B`s^*)7KD=6"_NM:,;lj
%)&<p!,1Fq[r4cLr7pYq14N$7#/.j<a37Sdal?uWd3ORQ1;&PahQ&'`*^HfCqb",48IEV2hfibuW/!GufrM\$rX"ui4IXVQ2Z.9B%
%s(%KUXjnAMD#9A6PO$R(rRl+%M2BrMius'NX**1A/:BgA9o>!4]9P[aJkBV$*/n!YQPkqo:Pu8l8.p^eS5lW_If2b`^-p@?ERh"s
%_B?`*Fd8Usfl(N6YXp<*.Aejg$$(Ocb$P`-`cmkTIUXXB=Mc:9D.gDmP*VON)aWMVi+E6p+Cs[@h2K/R/NL)c2?Q&(iC0W*O-Q2J
%AeDE8btN;,q+nEV(0nqlE[u#`]`j6djYlKoahl9'9OH"fU.j&6CaRDqp9Cc5QoptVXXNe!aC]KH9'%tu7ENEjXLOi>hi!X@[%*8l
%.%-<7qY-`>$KkR&9m]aC0JhUE1>e#\hs`Pq]dQgFl\sMIE]a#iA?q"in"XdL?Bd"bbXt8dhi!YRXJ]M\8gYRJqGDa3p7c)+Al_D"
%mp)]W`B?)HqXPQ"CQa*+gE4_`[)6\9'=2mC`U%]b+)StB>B$W\2'c7kR5VaiRTs@bc9G$FX^dAIF8&J_*BnRXp$/1(qLQ`R>rsi$
%FMDGO143j8[Mudd,+'=\\Y5K33\YX`Kfr^'gM'ZA_'>>,d+PIClO^#eJ^DOH_maS$X8M&I^Ku&#r/ORF'tXA(rm+'dK78."CB)a,
%^L:b,(0^*+cE]T<(roq9ZnEr>eQrqn,r^Jf>1L])05b,$oi@(g.5@OSbl9.CZ^h$KEBgC,?2q;`[;?)\H:=g5gV+"b^LWF5)@'PK
%GW@ZU5pl!u;-7OVX'q8UV$39#fV/WMp\s@5IqcG0nC'>3rlOD.DEmm[Z^.Zk%1eNh+oGP5qPY8ld'Z<!Q;AO!*;(YfH5Lc$WI/P?
%_H(f</4T4r.&\[6=]gcS*g%;ro$M8i[p.BK]g%GZp#Y),'%kgN+uq'_eS[<dMf3q#cB#2P:h<;T8GMrCKV3GQ2<+?!"Rk^T)cd0q
%)#B>L\O2=X5<$#l@llWX^W"hH5fp\)Bq"GMi!3UF4S[O89hb^Mk7%NJRuKXWNo?-CCs==rHq/7kh"q)P\qXh]F-Aca4C-QLqqBh9
%cV=,gAH+iWXa.'`R:(eugUD8FD7?3C-N9ZPY,;*cK4eCPZ/W@\==ucm>g(^]2LAVE2X-qbZJ+HrC<s$UghQl/5hj[<*97S4eJA'u
%)`e-R:Y0_*LVIHt#)U"OGD?CXSnD/HUHP_KHb'8qGAa_L-@9X9Iq,-glFQB3)%ai08AqVlLu==*=)2@+`.1r/,Ad\K8`n$=DQL/]
%lhRR>gfVm^oku\<VWO?X`m_Zj>)l5gC<LR=Jlspl#*\Jjs4lgn\[A#5l`o$p+a9X(XnCIQc`QkYZIZaf6NE+nZfCn()?dojcQim[
%[Vaa:7,sdpR1HQ:ph^pGesIEDkr%2A7oNg(5FoBsHg9<[maQAQpqagSi",bP^]R5^T5F?*s16Kgfsi-US"3#Zgo7mIpt:&mO(od%
%<Sm7O9_mTOf/Dh'VIu+#EnBr#OuqqU,`%9?W5\r`$01p"[?OeV8pgmH]<?0LFt<!fWmY4mnXCR1K1=M^LQo?eF#$*sCBg3#FFAq'
%7*!gd1*Pmt3Y#3]*t$WHWB;bbb16Vs\iTeVbLNm_59_k0ru]r>=^V%&YJWu$bSO&\N>IA!FKo1q?M`9bJl4O49&3q0n[iShIKH&I
%Im1Z?QVV]tA#'XEU(.jmEkUk>ja++["2.Lq%OH574gV^h+!1GuT!oY0lMo!'G[osA)Am8/G%H2jQP>'9#]J[<PliusnQ09t2uqB]
%nW_)3pKp9rYljm<7HQPZ12Nl^_V*"YmL*Zc%pHZQ+$mBF5'E8S'ZLAfO!KP4o[I5\?<!>qRYPpCG3(1nH[pgWKGRpc$3niBXXZ/P
%r,!-E(3J[ult<lIS?tg>r]?D)f7c!N0Z1b12GqtVo*dQF@Pb=^oY_L'qF4o\7s;4hAZ%oSOjD1Cf5EUG_#4..'j^,/(s\idKlNJc
%;u[fsk'6eebl@)(god@+X8OgXqE4qH][s)`DN>YoFU&QSUG-A?lLSij4XCkj`R`&82"kl5Bu&%D@4;RSs4"+J@@'ro>d9GJ_qAU'
%^UVKur^G56i(`B5S3o:uDtbEX.#5506+<HEo.-Ukad8kOKHR^cSr;IB3Tf42->uP'pu67*\('h(K44&HLpL-#KHj-jMBNe.M?0BH
%4B<<c#Mk<B&$Zhokk+S+RFk3IFIQkR`Z'n\VdFAns-%Hr5Uno33jEq57/iNAs$;kGo\RkeXNJM[Jlcf*?Zs$JMf.25Ab\5,BnoT8
%>'M%I^<[aNDP7C)+Ia+0Mba_9@sTkGSqkk0mHqf/)f9O@2A>OQ"g@o-PPon@2!Y$UiNjpo'tfOpa&[QeH59#!@;<Z`Yu/MjGKrU!
%fMg0CjqZ"ga&CNm?L=AaBLalF#M#J3m&J:q1rfRW`n[W#e\"S.;C]AMC2$@sqlEOhXi@J11[&,`A$K@<h2dm)e&KG9WH#7ImF:_9
%ZkubV2^I-SfZP!6rH@TWkk2i2rBCVK<7o[m*9SGgeS80gg4OkBU>$`27[L7OgA!hjgc=e`!#[(UqmfJK$+m`SSUA#9?i(l.$Pj&[
%rUY3ZXl_*r<AUEPrGL!IFb25pQ4)DHY6$l'LM^.J2j@LkJCY/bQ\A7+B[PJL>nQ'WA4t:rU:T-7Z"<#TN%H$W6$H#K'Lhh4oQJUX
%&bM).ETp(s*^XNVG(51UPORIYDPp\,#Np6OK8NcHWtC(dS,mjb%?kIA&7T)P*:2FQP:JN;;mi:m8M0n2[*C#^,#eAImo$)3;3K^3
%#c]bDoL4&a@*n@mL5pOJO#erI\8os-(^(X`m]bLZC2WW8FrTi?TQ(Zh#)uq])i-2.E8F*NLAL\@h2rd+ZbAE'M#54Th68d-5KWCc
%b-OXaF4d)OS$&k-P-kKdftM?=XI)s:;AZPGk,VRe$Eg^@.+lQ0p:I)$mZDp"O=Wo&ea=+0p>-kVIt/-_2LWh)7P`s?VIhh0Er.p8
%.=Mhu80d*'oIdW/W-<80m9G2O0s21]kh!_VgZsN'GO7""TeiDD49,"!_`skLNZFstCf@`H9ahfA^%ana>TZFG8l8).)RTA6*-d0f
%]7i]0b%l9*:03._d\,"GgA_plK`O`ZS$<\kZHJN^[j4njL,[]SRRZ,DEqgkqUlL0]14ptcLr]V\`n<(k48Q@DG'3S9;.J;>Yjjj>
%"(UG9-"rrgl&c&3Ofp/BQ%n,.U/G$@IY)?P=S3L3<DZsND-XgQ(Td*0.T^F!.eZ>uR&cJoj9&(9YV-%Qem?3CbO9P_I;]&j],f[_
%eB9raAa>9^rqp<ASD+B#=6S=Ae_FJpfY9\qbXYs%<h/eXm^Q',JfPYeGi;@MA:t=Rl##CS>h:iTH[J8&r/t)/$DGqFTd?btYL*"1
%#G%&,,W%7j7m3'kM`'LZj%`F%OTqS_?O,[dkf(n-G+,!$cg@sakRHton]j_r*NlG*QWG=%PWjp`BiQ((.O:'LZj"Q;4g\A<gYc\u
%XaW0/a<j\o=u]5T7/>Y^)2ohY&dRru2b%MJGR)`7qtN/B;"0b4*X=oK=Hr*1OMiD)Z9c0X,0<E=P$qmK.u0"HoD!+P[9g1Xp6s/,
%`,!%th5iAe.p#b3daq0!Rs(pco[GTUmO]Z+^l3V5MqaX3\hQn5Ua1Lf^_Nj-24eQO0gqOA?dsjQhq/a#p&!AXc#bf^p7=$g[-Q4a
%dg"N_%NO32<!=]\3q*1tZ-b(+i?`/gn3QS(Z/,5DoPBG.oFg_R%P:D'iUPj=eo"I'TrU289U?X[h#%&f@@@sIM;U&NkMET2s/*8,
%0(lC(Wj_rlV)LXl\0"]0Js@D/PoMMZ?PEMHY2c=6W7a_"3V)iBHQR_c-Za<Z(e6[fG1tb9#5++b=N@p.3Zo'!EoI'*o^&LSYZ`,*
%V$-Crd`o@c/*r8=G,=sS-Y+oM04<]Zc'l]s+JD==P&1tC*[q\5U?hmgf8l29>oQi2,g%]D>7/<R%*beRhpO3$.itQ;AImctl$-Y$
%\XgXuCIeh+NtW>+R8I:tn9BM`jb?<b(<S$\7PQMO?(NZa[A-P_=)X30UYW!F;mW24D2i)>)D)/pIVYS=4"qql60f`OYXCLQ3bU@i
%'^K&T46OEC<@#0*Ea?`m]=ecFfH!ntdV^n9ls_q%HkPd,h!fM%;aMhH:s^lLkBj=74"'-<j3>H?WT2STSD:+.R.,_s5:L$YcON(A
%n.QHnqn.S,NrlkOaE'm%P"%\T1VJ5^?O^eeT[>,L$#-9c`T!th1fli7Co?!?gq1tVhMP'N/609>3@^HJo:8XCPoERR(1Qt-W>=C:
%Rg,KqLmOAcS9^ElpP5&6p2=Z_8eLN`DhPNW-2[()VKUD9?)\.*>>*/grE.k9Jf^Z?\b)pL(9!a7d=5".ahR2'Me]9TBE;!JF]=-G
%%9ejC(<*_:W%5<M'dT\s'pXf'_!k7^KhmQ5CUIJ.^>*;4>XFKB0s[<'`YMRl?N$TEkPN7I$ZjVeSrKO;9$1r<,7=^ho6S.hFN0b:
%[6Kg*2nJfs1p&[;8>Y,D6f#e*VbqhL;;n1`r`;SBs%9bhDg1LYW!2HcIVQtCq!ZCLpHO&`$n4[$@EPBnZJpf?BFSL+ppgo@)d9=E
%#o]M12R_P)0q@qeSOV`(#]iKD<Ed(u\dX;h&;\NqDF:pe%Vl3<%,tXu7krB$BO9f<(/C'R2!\8F-dGBr;d`L^RX]$ZN$o&PhlldL
%+d=qP<+Cbr_.-mB(:-Ho9g-O2l>_M-h0*F9)2toe&58$5LNCHu0L]J@#-A]>7*gL'Dc?s2Ck*BCn#M]$I@79YKk5Ji$n^<E\lZRI
%9/;`l>*>Ru=.T.\#d;hEkGsRserLU3FDL9p8CN@UH@p8n-I&pSl2eNE,"QGse'"B80ruAFl+MHp]EnA]VRn"J0KgPjo1&$W('N7<
%)FLX#=%Ied),.M\:p>-]5WBjGOqs>jqm_g:K(_Y(8>R+Qk,-i2Ilhpubp;!F&M)H"-C08N+[n$s7>DRfmSR/P9C(?2+C-oF;\U5.
%kZVtW02V8s+XPm6as`089(YSq5:KGMLck[d1itUL`!DP(D!.PVd?;@A=-LKqo(0)e#:^Z+[6SoebMZr&Z.bjN)5U`J&=[YN8s\<h
%;Du>`ipk"-AhB:F*-j,R[irAck"5lj7g7AfSM'=N+67O]Z.p((c-S<5o[0loYmE.Y*''l"UJM6f]m=IYL([+#9sN.E3APi;9"+V`
%A!;*TXJQH)EUH6:Ahk3OV0o:s<QG\s@Bj)]X3g+QIt>A&)m\gG8+V^qomam!@G%]9U840q0*f0Sh`N%,#S>1sGHT:aZX*Jc+qb8e
%<OVWJ/iCcAo!cb$$O,V5>@b3<El3f5(S,ESG%L<R/@Ac1H]=EV\dEp.dg]_/DGDU%3apC#/GlrfQS]_a\#pX_5+(5@)`R6J^"-0n
%n+DM00-LqbVElk23s7bmL+T`b"uU._;nH)5:i2g,GJt1!Uq!n?h<MslKjV45EsM?"4MQ_[ZB=<Ij^Q7Zqt&fA4Dp"OE-85,KiC%g
%hV7Yg+pb2@XpS@:SfKrg[']Akai!f0rUL?f_84:FAp:_0\TZB3o:g>>H1Bj:4imBc4)^_Z3;:u^hs<P_\"9^e:ET"CFpAbkZt&HL
%$bBp*e$NHO>Oc0*]>(oU-3&42A%C(Cm(G5VTpj7!nsqBdoqK3DnbdNTF2J?G\*Hh]<f6_N_i$ogjm!)Lcn1P!f%c=urSk<4>Lpi[
%j[-:ZmM5GUqj0rOSU5uedCT?qlW`E.4/f#YdpAQB;S2Do2>?M(:T&o1mJP_t[E@U^5&Y=DPs0,hp%$A(ipssZ[('>B5rD&:V6=M:
%K4=6>4*Ra1fm(84gUc`i?b.>%73Z(\'J"M*qrYo)L[QW7BQS1ibJff+r:JooENcrtB5>K`G/&"/Ej%nNnNNl]TGmjbi_j?c@_Z7)
%^9l2:2[TrTK;G\Ob?pSo[i`=5D23ba:Z&mrGI_%Z"BY@sI;,T[^8+cpg1oPhlhA/se\AbqDD`3$4^@5(SIQ"gis4J(JOc3q0.ott
%``[fgH*bkt4DZW5fjA*/S#9'IY.NDgR>#Ni:LC\:dfmicnO;mu8BuW#]'i=p\lR]p%A8pXr?mLRbMcL>4`"";5*QjA\+_fK^"Z]`
%D7n,m\G++UpXJ#:Ip(KM>Q(p@SDX3;kWWi8!)$+Ya7lfB4ur)%f.@]ee#fZ@c3dLs\(.d]J%iC!>R`S4PjU)Nls_g^557ICO<RM\
%G(+Y],/5Zl/T%_a2W!i6Uuf(PGJ6si`Woua2#+bmo^qCnZ;H!mnUqL#pLIdIqX)fLd[QuM5jr+(k1)_rXV[]<T;*asMbfA;<+llf
%^9^g%,N:>1]k<Z&dJ6flS.r^i'l0j'^[D<A_u!Z`q4#tTc\lF3$R_:+Ic9dFA\W1nR&C&ip[a/en5Ar>cMOfk#!tp]Gnk2pEYVIC
%)YrfBhJ"(c`S0iWQ&$.<#*5(AhHPJ"HO2,g2*5IIdb?A>rJT*9[sRqj>2+Q$N:`9Gf=MObi8`pqXg\6U/kqUR=nGruZu_?D<3s=2
%A?]/c2Y8TgKtR\?m:pc9kc&X[hHW;0h^tA2kRWj)N:j%nHJ\Pf]6=fJ6(@R2?SB>d2)t0Edc,o)U[:_;ki9t![dgjEG.Yq$GkbfT
%["M%>LnhUe3.%>4S_I9B>/DH[11/i6jp'$:csHC*^GfL8%_ccHQaUZ_4AC<N?7g"qRidG4:$IGhXbQH.>t!K4Q_/Z\H@Bo'8ZWM#
%%C@?B..1CnKM^:d%5]u?<a0q&::<)fXo^g>pNJ]Cc[C:Wh0Kg"and'39&'#Fh'&Y:jjTpnkhb1fLp-Jjm6ME*o[+m_ZMgUI00[,.
%[9fAT9f(bm6M^.hs/ap**.NB6>cg4n/5ZJVLX2O.aaX+roBjY+:tkGG^P?P^QF*2]+d('qEr2,!HJkm<LQ3JO4-cl8%sSOoTJQ^b
%VB:23=9`"*jC.#Gd<R:0HQ>3R;u"^[O"MO;$SO^a\"FY]U@SG!Rj[WVKC/7('4#T$Nuo'OKnj"LQZ,nRSNXQ*8JhI1g^7J'g#oW<
%>Qq@IQ/[(bf,oWLh/2U3T2_D4+CDm9+o_K?daKS(8Y-]XQT&.'p%mu(13Wt]S.o>EI(iM4fWcN\VhCOta":KoA:JZ/X78O"@t/oa
%#3u&+kP^.Cq=]3d4ad7f#lf2Q>5dN]q;BQs!rhgc$dVJl>^PT%`-?D(>EM#oIlXWhh'8j&iGJ,n]VLge2tcbq_%rkJf^O)*:U^kn
%=5Cp3ecAu(3QG^k&H@%c<5*27]A)EK]_5r1?XDO-Wn3?TRfZOkD;.9@Gb'p15LF4:")5*%b>2Ko#Kr#1Rn39&W=Z$l-.J%+0r[H$
%h&o.Z)D(@dc2'4K#Aofb!+^/&eJoeYY=UUkfr'TOB_6XT5?:n%_OFZF5pRa"aA#P8r=(q8e;.r-moR[;6?5kI?,]m0&ZDBg.ZEZ5
%Wct0U83=p4ijB5o-=cWTfSJ^J]Uh6F\rY?kJ!"pcUEWqH@f-[H%XYc\Sl/k2L(TR\l\#7GO'\j?GDt)109dcVKnL"U3@23bWhHV[
%<Y?=H**9s(cNJgdLf^MZgNuJK7Wg/`;q6c88^VY6r('JQ7RN)T6hEhd:=peu>D1.*CQ(X`,SDn3JW_MDB7sokZBWU9mn<Mog;JZF
%^-RIg'q38X'hW/uE"NN=rs1X?&B_4+bg&#A!ji8J=sXC-;oOo6-&DlnIJsG70K/WdaH/r[p.]gr4>Y8HG)CsBW1$80KLS'MblPH(
%.n296VW:].WD0-S5)Jp%C9Z'XnKW9KeP4^<TG?J(F-JOo09PZInfi0cUPeulXh^]uY4FPY"7Pg*,^pW3dJZD4E)aGo#pJf]:<]IJ
%:>W^$!>YQJG@C4S1r<R@U]>0!H=<Rjej"Gm\ZQt0=k\/ur],21/,,g##87UsG)7SiE`&">ckm.BKI&(6e:#EA?>_b6+[gbN.4tFL
%C.P\dooJ34_7[AZK&eL591pP(n_,WQG@tKtAeeZ:qejO+Cn696UXnt)_Jt(/\[,7A>u[FSTUO<+^X1qBd*\U:@AGdII6.1138!(K
%'L?,*OUYjG(bD]"8cb'd??pT[14msk8&Z;#a'[;/'^Y"TpBiS2^&H+,p1E8u[s&C,=bp7)[NMk8c&57CT9e_LA0W;nXI0PrF58dI
%_jA?rle_/HrU:J6l-B$?RN%X6h+t<:N<E'Mrg#!Yj,-HsU[nQU$O<Nf[s)K>ol&.@HEF_s!Km.e*G"a5.h5ALW7o5qY!dg\Mn+lf
%T9IcBOp=91=];#$ab*.AA4qW$*ooF!o,(8](FtQ<d2H>\:VT4YH15eMEp:L8CAmC\2:c+W-VOjl;(9W9'b#V?.E^N_aW3Pm>l_:$
%pMeQU9GO0KW72HK!^S]c/EjoKWq"J53.0S-)eCO7WZlSbIhf]Q#*u8^V6=N-rSm5M\$gGPBZEB-B'`^uEOr@B4??3[Wd(XQ?PdKr
%QAF&qDc#8`6]kp2kRDrT_7j_J\0>kLn4X<H\+JeRj*RVnf&3U6i&<fn!ZT>W=$LtJV>Ofgp#.6:o:bu;btAI///2F*3dt9_5-"/Y
%Oj:EXBW09ZKC_I4r:7K6jnA6/''&$&^$X"l4)7JbGL+REIXTL/+6HpJ?0s:2*cbA@#4EI*&q/HE17m8E&%Fra.1C'qg2(HdC0mUX
%57X<b\PC[+NJc=OZ>)RT48IK$ce\l`Gmu.hk5*73G9Q"[]VG%OhQq16>Q"bSo;$/<^:E8orU=?;@"bJ'2>Z7aAT'h[g4'S*'rh:i
%gK6H"m@8=ko?Hqe&+e3hT4'\HY1El5h[1`LJe.&N2KmXi>3U.XKGH^X&[j_aq;O>*mFj8+XG_+.(sA^/@F$ipc,_Dq)9.D0GYgN3
%_W,;H'4[4eP,61V8A=juH?@eA0,<l8`mW<HT-#FPNgQ?P\P>%I+jhl7,C->;G0*2L@Sk8j<ED*1?@BEu53p.t>AA#]a\>UJQ-T,I
%]t!ofI?TT]+^R^RH5V2-MGiiH#4<8!0Q[*YM2fg<fP2Hi[?XkTQ*k`g0L(/jO*Wl\O.D^rrtoGlC6N`=hKKL.]@YnfYHQQLT3lE;
%]e:s.e>Q$5P7IRPET%k[+.VMI\E(k:3Gic6@eVD"LEG-+@HX:W!Y"6uR>`)<NT/-FrOYo?gp`:6#ro\4pNOoif&pN0UfcASDXS)C
%p1E:4:?A_M-l,7Vajl<'/$Q2U?+7<>l>>LU]SV9g-eFb6R_Q,;fj4+QKu9\9cYN2,?4Asph.&J+U!DoE.O\$e0uPW@Db=[.Q`KX[
%NMk['d*3AN:h\aY<Pmr;G1iPHSTc^WqX_2>%"k/F:@<U=.4r",8$N<qH$R_l#RGp</Uk+5eS&\TdPnA44uuKk%R+^3GC2Qq*%OY(
%\_cZGj3^<HWn$_0Yp+;FHsA+8rl9ejmEiBnS.l'RX5Vn+1h6?.I<4f6Fb=B>1H#PF,)\$K.doU<i$n(1N_VLI`tX2-F0E&YJ$Rtd
%>UqB/c84Y^me3^K\'IJ'aOF[o?MRRUWuN-t=mq;uUA)FX]*"WmHX0g&nZ;(A5:uP2F=a<$TB&;o?97C*mh]`XMgM'JGHI(dL,c13
%3'jY^[ScQYD*5DEE/%!!Z#dYUZ(iq[d"Zfn&+1O+cL*j29H':'3o0W&X^<4bWCaqpp34fk*\X\`0:AF>-RTGm./NLN:XC]"3B!`R
%ASO=12fGap6PSYX^!_)_1PCgYHgaVHjV(kBHIDN`=,!3/K'OLapt"'!-Et%WV%k/I3g;t_&7@-`BVi+a,/Uc9-DXMbXu851G2@'n
%>2"TC)WB8t_u>QGlbhO;c_$_2&(>c7gaMNppeN'?Qp9DA>j]4Vggm<7%mXd6NW/GOcIX\a0K/AcqXDmn#d!:ISQG%+*dp$7(LDR;
%X-/R:]R3^2<h')od^DRuq?L(<OYs!_\c)3LQA2JCMP7J&kuIU"Z"a2q7e-CrIDIRdm;A-qNRhAjWuKM,Z9GhmC4#W\q"!Od.Lk<p
%f>fD<*PJm`=t:TKj^%_#&KJX/Wq3#cGe2ufFDS6$'f6[=eu3T`#R'eq#RtR`pi>ikG&/"4/.W4TPW#rK)0C8l]QE?,Z4;0J)goO^
%?j)m)@5'n:U<&)M5*$L%d0.r^EPLuH\]ogBK=P;lghR]'bL9Pe9#\^Hj3g97!^$!+]\#'M5$H@,A>'T8kU?'I99TPRptg/pr]K)n
%=NNd"W<S8CfYol>;^eq]-:ce'X+Iahok%jAGQ&HhMQX&?;SKNpnjh+=0Sido%&rC!]Oa4*SIc\G6h0Y7'bfo"L%aWEA!1"%KiU]\
%CrhVRm#(LpAV<ii5m.#--jI`(VjM][m!eXnDls:Bq0omH),t#84pb*=iiBDr?d'TsDFhqIe6-[U*^<hO+>gA>+OetZO<rELd'()n
%bDOT'2el6h9NO>49'aZE;c<Ri+7E0EV8\e5^>-t$?XKG^_ZpV`gn&_)1oE1#],+\r]A>IqJD,D-@7)d?2l)mdk!n:3^HOV.*"UmC
%aU#iQ(AF9j*]UF,-74G3X+jRL]"d/6NsZBJ2NG6?X6"]mIEhp(cYp!fG0\jg=(::0\;?*74F$UG-ht8sGH8:H+N7uOJE5CapX%`=
%Bj3o_<&FHURKU7d?ts?$Qd6b'LPU?HQ"3J$FW\=N4W&:X/ShQoaTs0Q;X.#71`&;/Vtln'f!fRQS&N)+C]"f>n\sKs$!2BGkZV)^
%&N!(t[*sN/GDB7j)V:;(Jm0#LG4/F.qj%Vn+.lQ[6>oqo\nmmD%/S]7Vqm?>OTAl`j^dc/Qh*N-lPH=QRV%GZ!ZtujH4k*aY<b$V
%`)C(qBNLhA?+aMqefJr$3W5<C-`+.=IT<DFrakm,HDL;f?2LpLN!il`n\-_"[7gi=XIrraI+\/cG:t]@.!WA;544A[=Doj;^Y*u+
%rbh8fMpL:=iPq4r8uI*F^h;7[?qF*pS[J'A#?fr\!Rt0m'!UQF95"4L/#CLGiJG.c(klWcBfH66]t&1J6&!Lo]-"_Me"-)o_Rnf]
%rLb37ZH.X:64RG8W7>A5Z9rqkXK6;HIbOR'.NE>Lf(OHC[Q9];38\lYW*%^_Y)8;+Wtfirg^/0gf(O8`"o+</.<Q&/s1!aM.O]Nl
%q7AV+Z:g20;s3YFHh-k*C8j0@OO_q6&;E;P.@+.kIIO0_O1)4B2ca&)U<k-+SJP]&NX$r^BR>V'p\!>oqb_'MVn,pAOA%$KH?,('
%R>LB,iM^&]l9,%EkUP!i11u6&hKl\/hHBijFU)53RaK81OV^"<dlP/;pdO`NI<Yn4mcj?!%qhH:`*eI21dptPb6[VnCi]%P=S.m,
%4fA2Rq(mh`Sq4_,q0bo]pKoTI;6)UF2i#p`(p\(G9+1S?ACn#GQA[Eae?icF%XLq6mIse83/Q'Mfj,OdHr,.YnY0$b[6H=,M5JdZ
%DeAgS4If;5fcB-8?OAGN54TC&^eG:LG:J6W?bD$Sk)""/^K<.[/\bRi.MRP2G1m6e/lVSWI;rD9LeIT?RT(1GB=H7ehHRrn/-j/?
%oagemrXu)9m7$Mf5N6$A[U2C0]O,up]23g6r^PsCO?pRlT.do\\nB2d2u<8m.d+uTb\E_(XEjO@pAPq!E?!%'q.FnmrQE?VE3el&
%6"X;S/:;RDpMpu%Ks27KO:j;b$gX;JTAOIqXh>C]q"`pU;)iH0Y&\8b2\)lB&F1:NYS*\uPTK1W442?Sr1+'VmcADX(\J1!AEC^!
%A*;.[f'6hI)Vk'?hK>O*cg_XD/Ub6[kL7>>V8nki7IC(HMn"03cLt`gnqH438-[q@n)AHTJo:SFdqAiY\jN\mY"6ca7+K*%W,2@*
%30ELQ'7Vpnd[8d)1^<"`9"URfk6V++RF]lI^plQ!YZNq"\''c`eVfU+ZH)nD7,&`i/"Dedl.2@$\8=2mfu)_lgf'7#N+q_%kT_lU
%fe%Kmnu,S/Kbnc^LWG#\h.B/A$Jgj-I$Ado8`sY#l1nn2jAX6!/]#/ED!>c7XmYDN"g."H-ok]S=!>apV$K)@WY)s2PgJQ>B-37:
%'MCGYS(-mrqW:uJF92C-d$M"rlfM<eZq.UD_,Xd>osIaZ&#JnQNNbu[O-o:T.1"+[#dFK?jMCWb/a(cK>:)ee@N:Z9.<UBA1Z@i`
%(,hL''8FI69B4aSp]1hQ(0KV!`k(t@B&4lXLjFj);`^:i-pM*5?83`HYuh7cZ5P:WU@$B.CKL[-m=Yl$Y+-bZ.q27+8fC1o0j1Dd
%C6W5jeC2ZoY36#F<J$G^[/rte[>H,E-CtJih+%1u"r7/\\3@hm<7WG-:IuppdX&H6KUTL:UJDf+U8*j*A]/+N1c.G8C307ZflX&p
%mu07>`Q_"(kk3hekAT\F58e8Q[Ia(B<JIg=Sr=)[+BQR".H_q2qN$hXd-3s-VP]]eLa:WXOUP!AhFNNJ$b#ouIWb:2L[@Q:*:uri
%YJs_tDn"GcbAOp0(>Jkrk]bF;B.cY60QpPg)ME@-/+iFVd%Rq[f#*Utm&k>8iFirE+q9!EaV[p$e<Q.%aA#!To<pUaR<h+hkR9KO
%?NM[.=8\uP]o&>%(=<jHh=c-@0*a^/Th8@_522+C@D8h$9;+gr]%[[CNaQt9mft"-FhUnZ]t^.pjHq&_\)O=CaT;=Q.WfUB<Y)g;
%>Fb67bk*][l,$%$%-JPGOuhe;+*/,c;I#JZD`a,cHEi5nD:u'\[RLT5p%,X%V2X@nP;XJ67:@\^E0NtmffuI67VbN<BT,"3(70']
%];3KGk&2/r>N:`%B"Fg_<;/(f9J2gH<r^*+/9T4A.i@8KfXpXMQ6l]@&@I%h,JC"Z1cEqDDnR'59+la;Lu-nUo@<%,b`QfeQS>*5
%:6OM6MS1b8Ep$:X/uF9l^_ue\<YY2DPKQ8`]G8p8=V>:XbYFrqq(kEEDgERh`//kMM.)J*$&XN/jn0icW8k]S%]=KNItV*rETj:b
%FP>O\EoJ+S"*$l<`n]lCRX[*P@KKZX/]&at7CL/l98le+CU*K@SY.:dbUkG=%"<m,K1<Tcg_US^Ua9Z<nF-TX5MKmPGm-/LKhGhS
%OfCqYqeQX08W*^LJ,cA.k^ONKLOZpb:,fhU@GC:0NG/.cn%[L8>EV%09GoL8/[reh(UPd]X(cMGMRg-"il*]uO\VH]BCP&QkV.2F
%ooPu7\[V5Q?9YGs(-1X`oi=Z^lgMTq>QOkNrt#*W!.X)R\^N\tVr]d'f*iIFYRJGD:`+IJ[iNeG+$A"2FSl1=YoQ('5!T0K@R0?/
%rq6DBq?GS:3DcdTgo&J%Y51(>4Snq.drD`7q$:[JIaRsEAbHN1a\dNH"_rPe2>I'P`rg.Y@lgc(5q=M0FYmc@??\P,2mC\u%='Hf
%i_?j=hp\g6@saeUOX?QPCZg6`-b!Pf:0ol-LU>-AS\/YTLq7k;p[oLk0"bnc'Q[R;7*Ntm]'`0m"lK$\]PBhKE`#WYj4=BH7DA3e
%.V8c=:cWqeJuq.khTHLopk8dfbe3+b5-<XaBoC3JWI#D/*?4;0Uimu$5t,A)O_*j3,sC_/St.+MCSkuI9J\h;_+YqQpC'MJJl*_p
%OWu,W=3!4e2X(V'-Cmbc@mVBNi@@>[,Hpp?LR80[3^b/=<'pd!eJPa\Z.BHK)hSjtTOV6H'*q2E[\5-L:,l<@+O,+?9k%3u9N"_X
%1t)UKGC:4DhKE$L7BcscK^5%*76Fdu.->")!V>k';_UA<qco^@&=`CuN34pGdr8%4F.fB7Q&'"@3pgJ4#$"\XS+JB\)5//_(^I'q
%q0Bm+%,)o_2[g#QnmGpiMV<?F.>X>">b<F(Q,eqnctWu*qf_g$C66:.p^J7GckatnP=Pq#^]SkGOli.[)G?.<EX[Xo>j,$7+:icj
%pP-R.:"+lK^kl`@HjkQ8(fVK@L^\j&<%/Ce3n(H*^g'A5f1CX8*#"R9R7rBEq"rFM<)+K`,/oI:>+a"*'F/T%Bmt_#-GeB#"DhhG
%G#VTYe.J7mhmU>aS#2._>";f#kDJ>o_9%;;3jrsg`Zr]rWDgLmD2<oS)&`Y<_XZ7i6B#&MlufDB_AMlI;$M)jREeD=JA+eOR+DJ0
%.jW(P7>?@8R<6G73Lqn4f/1Xb%`6-p+;&T*eoa>^@iV+7LcUnP@F!=u/o4<CSHL-\*7R="M#r9K0MP-d!!7SBm/rhN%@iB.6a<&1
%P@0K5mA&V@BaaTg0k,IiFUNSu_'DAV+b-'[5[Q>qP)Z1n'&Vmd4@b4QAmN5\9#lNa)DY!"402jOp^M>5&uP47_6+?#+Gm+o':jtp
%k?(/i.u3.j`u:5C+,1g/'6/YX;1jp=i>f[+E8PQmQum2`r-ZpO@S&Iid5U>C[9H0XEb3`\RKiDpl5WBJQk,ORUM4+;.PP6k+#"NL
%Qn]$%-75%m*l07A+%J5Pe1&Ci,-7=G%OlkDG5B(>nY.XO4*hoD7k,bOJjDl;Gh\Pd2:H*]'h`U@#-tXWP1YK+,7RPA+=.?<0hWgM
%l99l@RR(_5Fl-1R#e`n;ZDc%S(qPO&(QtS3<9j+cG#VqB_8LlLON':X+4HB^/i!2I'YU-^@O;b`'c%CW__MZ0:)"'K6`hW],U.M4
%\PY_%p3sqo&fK[eD%-Ab4XM0'9k-IUV*Mo)%4TFoKB5?"M/ZNN"I==tL^\j25f0lk*q9_mR91Z9PK4;$3P$nQP+Wdnn1G$i_#[(9
%X$nff$N%[PTHE-&$t(-l`aE*k!_OKN8Am@:1+6SU`"YkaN6!;<YhUuM1H?uBh?`6&E4i]h3ku%1=;hXYp^oh"$QnZ]A;Huj/KBPV
%h#scpHY?1Tj.SXIs()U[(m!?O$0I5qj1[b*:%<[c`5WUEAE6H=k,4e0Z7M)?n=l9T'$-=8@,t'F8ICS=+h8L%]H*17@6Fo=JPDkA
%VW(>n[f?pV.gh9b7A=M90ZBSRY](tWY-:Y84p#MD[<O`M6E]FV#XoG]`q+T3AXNu_ach/s$O/l]j`91t[+j0E&[4Q29I`&$"M$m-
%Q[0/pB:bT$]^IqhWBB#Lc3Gi:MIUN2B.`+\b(Y^T\gH3sKZS*]Jg359b/juhVPN(frKQJ;c:qCX&&p>hO??tsPUh4TFqPZJ'JQF`
%8<XB()iH$k7"l32o<;+JBi^HnaL99LOq/:f8op2N(tU3SdUZ$,BbDu)bec2nKlX.@'*l7rC_@NqUjZLeAWm<"Y^A$2dsMb5a'g%Z
%$C_5:O5tsgP;([e8MG(J)=Q9I5K,\3+rP'!F"H,]Ajm>kKM(+TJddLfOUfRk)Mt9bFr?UY[7k*:/9u#(O2@>/0^hgcVX[5<`!$;f
%[K_!]1R0pCfMl;C>2;WJC)NnQ^3g>n&7T_H/'ZOGL<oN@.LL`n_>FV$oKf'(`bQs*9<c=XQUF^g-)l(@IRt!6MFMt_,SRglUib$?
%2%_pmU5<8AZO)l/\A(p0,Pa%:Yk!P/gM0T)QDS8p,R('$7Y5J<JKU-jN_("GjMRdJ7R\Ue"j&%YQ'=BFHP^349-fT*Mu$4pQk;Z*
%4DCO<iu/(jd=s&8_0g!L8Ac[>bskW`bY=M``\:P^Wob-u..HerDb4n.#.*h40pG(j&]Ah1(SYOpO@TAL3lLe?YXo;5`o\'#7#6Mq
%bXO:Y>9GRf3<erQ;XO&1K#Es;[ifb8)HBOF+`5@&LQW;_7<;![[AB`i<`4Mq'sMP2&EDn3!bDEk7"p);i\j,KmmO9M,5f]qab/Z0
%gGVW;D0QS#_Kb)Db3;E7-]oQ1(/c?A1o\h&&K+of6:`nS<[#D#]#X*Oe47`9&G*kL4rGQ^OM0kpZUR>f,HXmL9/>HT-th"g>Zh\j
%>et"!Jdg[;+0fF.ksEcTS4"Thk]dW9VCLqL(6EU)[lp1+NBANn_"N0<0cel,Ur^TF!]sio-q*F7k'0q>8d?`@2'W,lV$/B")*GK=
%*(LR(9ng8saK^`#)bFRr3k:j/E(QTC45mV5lGa)ES`[m]9S-T`6:`jSGp^GSUQtYDCj<nfKS!T9j7=<I/2bZWo54<n-riU%9;!QG
%$6-\u%tUC\`?r`^^qOI`B-E+VEK4lF<s1DO0NpPhB'!mQMliOP&2V3XQ:XGcC4!,=V`pIR_bWfGRa6mg:g5OQp9kEm]Bs@1N5XHu
%4!bi0$HBfeH@dhhW3gr(Xme/C=[#-qoK5&[/UefQ^>na.QnP'Sm'3;5nd3/KlZ8Hq)`^ejY)npUI"J))Q-%2s.@d71.e()raE1uV
%Cbj,d@[mi!P[UO10Y1$S!u[@qkSbDkl)<f(dB4`M`*5NXPP=$e3neH,j'kqjkJ\-2H96tZO*2J:@aB#Q@BTflN511`;`>OB)W_&W
%0Ml$m_u@"dSobE;aW512que$8+sE%%3U2l<*kb2l7?fIU/ggd!4/J)PQ\&\0F#b=mkUUSWJKbIKJjo0H6aG]4/t3ZS6,"lf.3Gc'
%E$q_7US;-]^pU-e"f=g[JpHi<OVC*q//]lYO;]#PQ1u%=PJ!gT"#fS_@!kVi$B.9\)mauO&E<X9c(EY`Mrhq@IM"J?knqW;oD''<
%R'@Ct-Sd$nT1H371-=V0@jiEk\:o[+5)s#p;+6\G:QU'l%S>+pLcS!Dl5C/]-9?F(QtNt"/?u$,-;C)Q0Q3-<OsH3p!,o(h[G:ZE
%hg[Ys`CIK5n&RDd!KM^t7r7VA%59XtDNBBm>9;JQjeB0'c!;B0A`6!`_];Y?jt>,;ps.9ka2#dZ0d3AS'#D*Gi7OuM&G(/cH:"i>
%gd&AsN!aBj]UjW[Wt5P`(?T$\"`,d36E*Oa]M[GMFUhVtcV?J)Z[#T^-L;8`<gq1(=A'N(8IALnf-<RM[6tjIcuuuobG7csJ&qU3
%5;)=/Q=PMem^Q=fQBfL&_IM"h^m#-Fk;\o@$BT@U(b*Tb#u$V-"=qo\i(+?PVFXsd9o?=<-m^<E'sC8^'"(8t/FB6,KsWR18Et@$
%7l'Qf))lA#<Z\%a\t.48,YXSUOB;`g<!j0uRZ?+*&Z/*'Jn8XhE$PZc;^=!C-<]%/[*708X@BB`Jr4<"0La\%R<!"/i2p-o6FS1!
%P(=/#K+</M.L=H3@XhBd-XjlEO'CmYWpT*`i`^*+7[PB9$'p8s_*SQ-9gW#\Rq,qT:eHml)SI/J.B4Z1A6C9+8nC^[4?<HX$:/o3
%f)23aKPo^pRHPkTH=)D(Gc'`Q*q;CQkW`T:*q%aHA^@RfPEO0!G#T0GOC^I&8V*kHO'n;$oMd=a'JrO"">$kj_,5WZR6Y(mQS_`S
%(3!73"G0P$<2l:B&S`X2B0]kfq'0:DblX2GdIN<9=@tq+CG**L`T:>lA^A?/=155mN%ieN8$LcL(])sn&tDOtbX)G*ojPf)`nD0<
%It\'iH59J9U(6Vbd8[)5R)4FX1G'u6E_r;IMUIbdgYlpKBF98=;oPEK)CPq=.UZf*@sdo[fHG5X5VAO-`0F5[VC2q!/i!q]0KsGu
%%+HMh%QoOu4e-PR-od;T>ILY,(!.#&&e^I;c9OAo$XS7GK^L?G8_Su;@SBn(!3\WrBhO^L@k`?r*;>U@--nD]Md8I!Xt\'R.bmQW
%$nelH,b+U?$IF\BTUJJA&gdoOJoOSHj`s2(XJnQpWIn?$4V4M$aKW!BZ2c)&ge;2ZJ=^dDa-PY(!p5sUaNu6Va2:^oba*/S&iSF,
%0`i[>:6J-t%#LXPRf_`r%"T9Pn_"*Wf>Tn@*Y2(=Q:>Y6FN0`(<'5@-/CtB9VJDr7=i+:;B/g27)X%g__I8%a1aW53eAG0=Gf-a:
%B)-#jKJ89!V6d(U=h$\e<oXb#&")E;0LDG:_EpS(aon@]-;pfSWo_kGbSg-pf2.s8YpinO/%Xc[0o<dReu1r888<8,QVoo_.^?E;
%38)cV;5l@"\4Og4jA'JGf;DP+VtO[)a/$h6%"X0_Y5q*3O.O:)a2JP39[mrHC2Z26-<]+o,POmW&I,=(=t!hc%NEpQ-mVs=C$hLd
%op&W`'daSFW1!k-%%gT.oa;6]b;CT5?k,'9ctnbZ%T>*=PmGsn+XWU&l@Eg6PhI"p?`2X("C-u'XAS)$(=G's:ZGq`I8.0fV\Vg*
%F![3O8M&n&V28CXrM7C5,*%em3)HHO?l\lVOtWe&m(B/t8Q1^a\(ZDCi+0172V9M!(ALZqf;4K>3@1*R6<NteRq@0.qcPFtg9!8o
%9X"W7]a>5A7;j?lR:jW"^@.F_m?pJ0lELKH0t!q&'7tdU3a_-b$:0JVEBf'@MO]+H8T=b@SZkn_VT\=lkAVf,a)>XiJ_!XV>oNZG
%Y0G\#6^0tngYdhBi&_PWN0A]&bc/IpnDY-%%%gud3PJuqNT*o#a#4PM\8:js_3f$&Z>eg-U1fZ;LVSkif]bfX5JKCG#Vn)jMf9,?
%4.@e`JG4Et/up[ZF.bN5`mDsJ"[dA;<^XZ5m[:l%6WOhMYbfgB"BoZrCbj0)aG^F^lYSOAMq]g8>F49R$7d^J%@]bi6VoJ2T$A_*
%,$>>*)3':W1[,A]."TF;GUAK3`?b<AZ>G4FM'\i;c;rrC2`43<5u(fm&(s40MRrG!"i3%A:a'))GIW&;YeuKudXa]:$kTP?l`>!E
%ng$mG%#5%';,N8<)'T4*h?:]hn'W<e(H_FZ'eTl@e-:.SY2N-oEP-P:iLrHkE^mi&$sc#b>'"N98qASMV%o/U`)4i7)&J_q]7s'T
%N_<0V:eO7f8-k04cnK<0/IIAMCGEX2%!o_^KH5nWKBad,WL7#_LnuH+P=:fDj'A=9*1%I!\[02%+)#"pn3Qbo?o8EH!H"b#jCj_Y
%R%O(.1H!)arjoct>hl8QVQ@jA.YeKKKC8L.-+HWV9h`\hF>9?%"saV!Sms26ZWml8b9VDP@=g4T$^dc!.Z5.NdpnbVZfC(,Ul<%4
%W&cnk&[HLBJOId]csiH`k/U`_@g@#DOI'Z;[:FVk+OgO$Abn+qPb3XP\CobPo-CWS@^'M':*'E<B(1`bf*ZN;-\e&'D6riQ&I^7u
%9QE*R,0@D=XgdBU#K'#T@'J/k:]TcC$la#Q@@.[4AhZ5&L/Ste3*g@toH\Q!:69'DeqWS?m;"&i;6&)u:dBSWS[r;DfT9MPmoHY*
%E1F;6dt[D=OpTIra+/"Hes7r)A_%P4MM)C_3_tfmPC,"na%>k`EQaQlSZ9emBNmHfC_iY\pgR3![r'A]JN]@2<D'$V8srap@[K\R
%CoL%UA=FT=g8:KtUcMX)Qp?t(93!;eo-t3Amb!?,T@Skjc)r'g+iEB?JI:E<C?#+**D4`qN&p<A<30+;cSW77aI@KjXjBO9e%L".
%8_Tn>0H:9g',B&O&Sr?'"Y7`/M,7N4D0C,VWp!%.6B?(a,O%CpG>4qQL1Vcs(\cdsNYdJ%]]7FcCfu%IZj!WS[23gh%CUm5ep:W;
%19]JF`Sgr:M-&"X:$Dh!*-<)UW5IGAXMV4%NC!I1:gP/Bn1iWpXn:t\C'F\c=]sOcR@I"l-8RJ5,tlZ%[6d'Y-&jS2=CcabAS(U'
%`+m8n+"iCej)BsckZ<a)d?oS]0ghk[b^a*XE4c;^`Yoh'U0eS@KpBIO>VkD$D!GhlWiD>WA<+X,$R6\3h>C5-.\*.`GQg-M&kK.T
%j5e`o@>N8V13MZFFRO#c:='dTlI*U)ZE$r[+_>Y=jqsLj>NZ$`__,h`@)<W3>D$2$JsaN*!BQ,U"J*<P)SkqsfkD_#,rM(XT2rWM
%`_3mO`l2IuhFgq<'Gq?QRYa4$dM=<`mZ^N:6t.qA0W/h8S/%i/XqCD#L.=0uX'gO`L]RuVf"sS5<AE6(F:=b$[*/X],Klt+Y>f.d
%E`pL<FV\lRN3UQ(3a=hCElKr(:+]>-857],G_7Fg`ZhcOkZGZ;P-*6/Za,Ap@iuL%KHq&P4N-Q_0GL5se"BpJ"B8f)f="DM+@qaB
%?+E!*f4>5+:h!:9"?JA%PGu)0/!G=%U3\h#@3LAB&.Oe[iWKj#ojT0mN7P\e[$@3kiFk6+MYG5P"f/o.HD7!.RY3sU?+H)TK$0ru
%?pmo0,]QAROBY+M82m4W'fe[KK]URbPfHjcA'$Ei26"hI],r:`mN[bN!@!<?3$O'C(g(M`;5h@OTLEKW6ojHdpe<%N@8aKGb$,[E
%'-&9cXmi#'Fc\-Y4Qg2LQ9k`OQ^UZHPlsZqP#0PPM'-G/W`g#>N-LM1aotMJNEMu'@BsK5-uYhJ:N2J-\fsoNL_Lr_m!R^,qrK@J
%13n1e>i)jWRPo1jRuXVE41:f[l-(<]g&j-@"&BBd<`s`-P!^&c,Ijhj3]LubAgSq%@Ii_AGn'm"$4?on**MLr9QI>,JSU:UJ&p*[
%I"[OI`46+?f3JVo,><C2'.VC$0Bj;eGUBbmGik<6W.7IgTcoG6aY7+1,$g/pFH`9q<A9m`W$.Hq^j&/0B![tJaNdf@]fuo@7,fo(
%c\=0JiNfH4Xq]0Gr;lt6%d*A-nJ/W>b.#\Tn8bn;TK67MhN8D,+g=@eW>[ChKD;]1CgSuTRTYqB&-u0]h'SHlJnt!Ufc890XQYH'
%2FE,QAk;ROTM?31r`a2)c+kV9ZDU+"kgE'*>D<gY=qZ!9ShP.&NHETjg'i*2-W)bV?B1JNC[a6qM:&)b(aa`'hS_r9"AP@W^LIL-
%'q!dfKeJd&YX9XOdR9GI<8g89(g2q,%<C_f_W[j)S+!lH0^1.DiF+gZ9EB>?\K2emNG=V2egS72QGS6-E]RiEIRPO:pmh(AYU!cC
%6;1(VKS44j='V3&N>GKDI/*o>_/G5gl"Ei>"EG6K7A:^FUmo>m1"`5)8aggF';CpiHe'Isi,u=T`%bd6n$=.;@1ccDRpP@;d.KRg
%!=^a+E(!DU`Yq:F-K&nQ2V>_^\L&>gRU/a''Z7?cWt>^J/e^5(Q;`mA_J;aUi-)\:Bj];Vj1Hg`6=M9eiG;'"`#`0uB7N6nhiJ)X
%dQ<+I>5uM^>ec%"dqO4u*rJV`V9>9'DW-[]/@=-5S-;qrbiJABAR,c":+dd0S6r01b2Upa9a3!EKTG@'9Gr)`K@OCH!M^?80\In?
%#_qhBG78M.`+Q\,82fY`jP1>R:4V;\^rVrL=D2`=SQo.3;]lou8gGX?f1oWgYjOlkNI,:`P.HDrr5lgZW*Ng'+:E+d<)bOsO\G=P
%iJ)4mXj'b-k<eO.'C#?OEGH,K:s8%dGejV+D_lB#YnX8V6f!O"j%Vhli<Eu&`a,4=j(TfUO_4*H@G!Inqe>!ENg?0MFM*1,_VXE/
%1m"dgidHMEAk<9m1uLVrP$)jWnP6Dq@eZ.^3]WOd(qJOW1n?2''9&GbWc4!f,TNrAilD&fdSYc7VMcur'I#XJK(.-b+kl">53!LC
%Ltpsi'Qr%T1aGXFoM@4QLh?6:afo]GSa&8=@64saZ"r*a9sU`?H:%sj[LmhN/q"@k*WmdW6hVm9].Gcd36!J'&ZJEB3<k+J_QXhC
%MNhNTXBCD)3qW=oD73$>RA!76d[_>5P%@;gd:AT*K&e%E%S5$]5Q[]TpZQ`r8l;5;:J=<B(%iCJR_`#t-.nm$*[>B$'I2eI8;eH\
%F!Rj(g<O,sZ/iMQOFj1j&kk!bK8*dpU'h.Rki<!3.>#Yj"%G&Cm2k$P',qeD]$!NJ[PUaDct+2:-,OH)X[j2&](nB1kp5%"7#BW.
%>p#I^>ftdGgCtSD*`s[L2DBNeWf/24g@$d"d?c.?M8MAI;2L7Qnc]U[h#e(Qj_.?+A/+OU3Gd&:34tH&Ee8pcWPK:h_T#Gi^p=a_
%B$/+dL-:I]n-4ak*r@1n81ne<W@br2-deL;E`('%kYSaeO`3IQBe7p;ZCO%4ihO`5/-4Qj.=iu)A2%n$BB7->gPF7JajT*%E/1LU
%`5``U@*<Bf0+'_"c:QaVr+guEr=p(eB*q<b#U1PY[6V),M,%LHSnU_tKf._r4gh**G2A>+2JF4i=5QiuTQ?7nD*quj``%?1#O*Yg
%(h0]QSlCALON1]SLFs2fh2I?d&47cOqonfN&7A1pK0'3g9[T^S]bWk@>](IdKMbTc[V3H)6a#OL(l2JXIR/Q[\eIcU:6tGreMI!/
%AlVKd-1F9:;2c?Z)UJq1Gdf-D!f:MTMG4gCWJ:dS,s-1Xl/u8i!VONs'LrHtg`^6]om_Y"QLI8l&Zkjn4+GL(7VkJ8.ib$pEDA)X
%ZIKf6#ZGL$YhW&M;W:2X]FpP>j:[p.=Ypi;,])u1blI(RoBLG@.lfQ7dUKSO\G9+?1hjji!h3_)#*Lgn!/F=X.-A7\VI3X2kD&)]
%Hpq7sGpJ>C&CT0AR+tY28[>inVoh[eZ?M>]E1_P+5s`nOo1:*4j$'#=1I\;u4@`I><=(JGN`=l0#j-R!Yl3Xg=tjs7'ZeS;/$Y6Q
%T3XjBR$,EB+p$O:*6+I8Lg.db`>F_Xkr?41rM[e!LZPCqagrf8(3:K)VR#dfaC:j+Je<FoZKAAWYK.n)h#Kc0NQ8P"gZ\W;dT$e7
%)2NlQI`7tPWZ^*f_.q>dEtlio2r/Mj6nl*F2S1,.AOpC'c,J]FO+kY9rPCrY#&D)ko#kK5Yi@\M=c.0akfg/.c=SG[8GGS?'a9eU
%>m.KNcieE06B[@>hdXLKe9+t&?[-d6)\NU+R7B0)QK27-2Z3CVh",.TP#H/%_*F%_`dF<[Z`.E(`V7d])MRa=G)Mjt,YZYmbM[RH
%b<!se@h:'njV\+Nc#k;A_-r\FDigd>i.jLQ=g?)7`?^B+$PW*W$YKS>lS83^801GGr'DaShS4%_9]#f7Cm]8Zc\EBeo8K&VG4V5k
%&@c.Lbf"Pn]U2]jb`$$BU*M^l,"!IAr-72%7eH#+U1Gd!1;SG`;^Uu59!1hnr(=EA3(W2T]P0=MQl1GokKL#=2pRk;T-a&?hJ"po
%S/GrucCJ+9h)p$r%7oX->imuiTNTHUSjP<ehC+:W*G!&W@qn3P*o&lQ-3ScDV^;Oq-*(W/gc2KLn&I5""tR5ADl]C6a"\030ER(>
%S)MI/S%ipk/=X'.k'8j0E:ZbmZZa5k4'bL7l>oSKc0u\8h<b*0BAST_c#[emi251O\tmc[nDj\;LU.4Ecbp-@?c^4.qnJ;R'*>q1
%O0]&/1NE]W4==e/\oCcrHKO@83U<(PBBDn"89W:SOiYkZn8=biF"uQ38*=?mEL+ngFQ5KSM.oM`*d_kNCn2*kS*'$aFPf&fB?e2:
%cCSL>1p0ZSffL-2ao"=$J7Gi(4pHipT"P%1Gs$@:/X,?.DOSa!&pbd>7^,%:VXs^87#cWI(]U8"o.\?52c\h^;GF6]@/<OiCC.MP
%_Uqj:a0J<J#V6RenWb\HARqlCQTK8r<WRj(GoAnC*t]@la(mPOf-W5lL/5SY_H2O%&,3=9\/^,U.Ppn37RUbm*"f1?feQppU=<I=
%9_Va$Sl?8?=bV!AcY6N.1'Eo!eC`Ofr;_d+@2t,7a.b'B#fbZ<jQCn8,"(:uKMDG_buh)34hM`;<PSg1OOVrGG!ojHS>au8[pm<k
%`>a'D7pXVJ,?X^2r:4KW7QR!:'>G,j>DYE:B-Li.$<RmN6t?QCYLUMB`(e;hmp1&L_a^:MjX[AGda:IB(7u[IC:"EG?--36&Zk<j
%CLh"Aa:L=..p-LU91Tk[B<hD19!&07ks2tP;^*t"Nn;G"kJSkCBL!H=<58i:Jjqf$<_<$=rMEjnd;C\X0Tl]"AmID:Z`^8&@b5?_
%A-a^uWPp6GLU;WW>pNXJ5*.6n8I^*@OHR*5ftJnB$(TZ*Q#Kt_n#-#g#f^"W1YOJ"M%"q[,&oiCd1:!1r=FTkIL*\SX7=1t7#&Ji
%OdI47/qe.1ME)YoD'di!DMjX6%"TWI0gDJ?YFNQ/&;T:p800r-OWe[3,j'll$]4[&`Nqrd?@Qn`$Q^N:6XYaAbR\\^NVO`/,Y>4V
%Sg5LIi.sqJ'.FPp>YZR'#hFBLc8t*.L;7d897FgUH)9e_33%9Kc(te'0rHf1Q>"3aO`!^PPiQop.?]Qrbn_CiQY<1i&rDu'_Cm3F
%_B8A;*0,:gr'H%G.5N/'"I=kBSqu]ZbS-sn<5=l,M7#rA,9<%?eAeWn%^D7GTe'V&@h0ci(aCp1JP:qKa(\S<:W=aJVYWP5OXd?(
%%hqpS"_ea:9u&&lB^A#q/n:]35*/@d7$a4IVEDakf[JK*W5E,@L-C\jYnj-=<gFUND6*Lu18?=uTaqi8]EN"MQ97^EZ`sat8WAiN
%qEQCH>EEH:ab)F>X$2WhX%I-jK="rU[D(_0'`4rhP,VFf%=OmGiq93P@e(Yd(97ri];ngJL+@q%rFo<#4@lg%l3#-2X/(J6:e7i,
%UfhC%<go"K+%Z*-Tem0Z#h=[Tn\hSm;@Z1CANt2M,FUacq3<:Zl0!6n>Y`)oe"A1Q+gC*2dGAS`$f_Lp,3%&2KYpZdGqt4"Yd>od
%DVbql&8B)WmCV]t#_T4UqGA;&Y!SoUaI.(SN)%+[6IKVWkJUrhf+8eV!mOciV4o$C]8r%aHY-g4'd!WX@#$E6qK*C0cK9fAFa]:h
%2Tb90(RGnoR4YU^QrZWC*%!h#(O3nQ""/+XRfpqN`:6_VO3(/7:Ot6OfWKma2US&s8l<XhP8@csS79(Uh7;i@B+a>NIIatomleV;
%FN9#o(G&ZCU"K"<>dR?dm7i<AQH0lNjJ!^-[#EM1gJ/`P"VRN+ai(.dXg)u'9@N'%GJm>]"ig5e15"i#F%MF-jHDX9a"G"Pb+P/G
%*5b3Td3=.i]D8ZP\u:PiLX'*;Bi(c`9UtirBc"l[+[gAh`nH&P'Gkgc3o@N@(e9FFL55YO$$%W3pgb5t!ei<M'olkG#+ESmkf*fF
%DQ+bj"I,YQ_Z>Fbk-/`rhfU(4p9!P$ZKHb\gZ<cN4Q_q)Q1nB@SY]s1IlUAbhAAMV$/LFlEd*g/[is[CD\K[g4/S&17bECVEd"1O
%&6q2BLj3pXig5)9TL\FG,Lf+/$R*"a=Y!En"@(YDHh!j&S%JlV"u2)!"kYF%S_EIQ'kkZmHV)7t)eW@&8*/r/]u28Mgi/Bk<1)Q_
%/1rG],fJhMe0aa'4LHTlOFST._hhkq:IVK6HA*D?V5)XP/A&&r8XN=NnhgobW3;]gFkk9,`qqVPE/O=oe0oi18B([e#M^s[8.C!_
%h*.=d9?%'j#7@GpQlqD>ND5<=&eC6*GA4<J\tg7D99DT9"SUd9E<7A(o14EDpk;h$2'<bgn<Vli?JmEIBuIekG2ns@pKAbUi4X<o
%\:Lu0e&[*RJ(*%982_MPYQm+I+*bD8)F8>YhDBsX+(mr2A6Lh++5A]E@.2u8U0n+A)H6/!h^kd8Dr3[[i2sakAAK$sDAl_ueo)O6
%Uanm05%9.BC6ZOVgc3Se"E#8p#Q`^;f&4\tj(Ms#()(u9JY&sZq_VtR$lVM&eI\;>-f]/+!DD;nQ&,p#$'BI%!VB'sT,L>sQ>)30
%*F4lfEWS/;V@L929JaqU0KGoE@9^59g_Uu<M"t!j%D(GY<p#ccB#hqp`sR1Ldp5Uub;!+5YsfIlLVkJ;qKt:MN?Ku#Oq=AlI$:\F
%=9>s#2Ao2i%=oPr0atk]#IP,Lka<(f,MVK5m.CW2oEjY^eEl3*9(o]1fN&.FQg#eI8jRXU"X1HY&2AK1#4&M4]=MpcT$q]F-'t(Z
%gV2B7(:tWQF9gZ!9,hC\Y(R+)k^H4%W3>_<YqMe"(hjt>4bB)32Yf::Lu.HfUuhKdZhX&YdO%0<9)=XldaX]9Z0sask&L209N:Es
%^''d4YbEh63XgS-Q8Gak_CX5@YfZd<]gt8I/eCXa)<l8PM]bp"#CDQ>+,L6X<3QU!)j5H]XU'8mF$%5E,V;US6*0`neg0r3lL:0o
%L-CE09"L,5C^YT/F6g[Kgsj'Bf5G>2f\8t:_th!NQ/QQ8fZl/P2mtQU@r?*uGQST0-MARZ:2(Ik?$kRW2C;*@9/:#k3B8qSM*2:.
%7V4dW-/`eFFrVa\#8Rmh!g@O[EnDYhb`@8h,*(]D6D`hd,Z8$UPM(!C=S%9_Jk/!HYbH2RGc]6M>8-LZUaEuj"\*gto.d`h7cma+
%UP?9K"A"WVj:ldYNbcSS-`75^O]WI$+rB8`VYf_<+pcY?;ur=#372&Yna-ULHu,RJOMqcu&4m/TLDX<,SYCroSDf`n-9o"6cCY`.
%0,nZuWd,F=)S<af@"_Na@ilOfM]+L+1jZ0^6fb&%\9ge:4aL33krDGY`!4uo,Ou9%!qopUQ&6_O^:-ZF4S2'FEs-nREl)01S!hsQ
%L(LhLhlhq1),tP5[p)A=VBb>bO%E(RCi_HWB6$!E9f)V'f#c$3Kj?Ss@Vb>JhuXS?,Gn`u8uA`sCXfN0OO#<13Cn>cCF6)B3n)5H
%6XaaMXtp4@&gS:$b=.7e`A'\\B,qPSF4^4VgaS[/f2Z$bhkEpP4FTiQ:uJV\.mr''+,V%h7KX]>H9,"DnDpphNi<G3`*C?>%s\"?
%1APTe9M7>bCTe47j,tGb7jD6#`=P!ei%p,&WNM'G6:a)2_uoEI&u:7Gi4at0833TcK,CS@@uB;=A(-s3nj)n98n3W?OBkh#I$s9"
%aFc<^V*'k3PjdFa40/R&8B5b#a_<I28[kNY883G!FX8)JV+o$DkQA!6korlDAF..W>oD>oEcYm5?GD=Y@nj_;6fTAI]/2.&KMuAT
%9tIaN"7Eun$feCL5=dam7dB.(NQ^p*%ZYUN;]!JcG@N"eY,B/o3n<&k#>']K4GXl11oH\UAY\cgNfWQE9=d=K6)*a\mP")q[LK2g
%0O8Xco!&cK6DR+]@*mR+^V$c7\MQ7JgDeLhR#M(baG_3iPKCsrjT#<f+@2/b<lUdg<Wo@t?mIc%^CSXN<@"2`Di\Pdh2<CZ#X.@!
%0#(O?(9:2]QFtHm?70f>\h6Ih`6nl8@@TnL=pB[;5\C%Z_7V!F'*QUjGgE37!ct0i<:19PhsW64hF^#c7@`99q7oU%O8Y>6RtjS?
%e2uA+-^L!loo6^mE/r[ird[qR2j:!\DsE6U]tFcpH.dE"07/3K_sZflTKE'3A&.!:)MS&1IebrcKELn@nMh.d>cEQ+s2s:-=DB!U
%#_Jn"-jRcr7ZdF1,TCD[VsoQq)YHV^bapsBE=Z+e'@&AH(K:D+g'9\&@#J8to_c[_1MqrY/g8>mA^R47.Kd`srk*Q7QCO5ePaLQ1
%RKLWt\r#Mt/=>!(GmN5I-21q6#:X#+-(YrObqjoB)IcX4fOYQZ$ffR&B<+!UD9W?i:h2tk`ed\k-o>_;#IJr?fQ[<WcQtgXS;`CW
%8fWDr_tAKXUPO8S,?LFg(,^*/ju=S%4+H'L+7YS#[8q'hMetiHGjp[-qnqWC-p>cm_kV8afEGd?Rgo3jNnH2NZrt=emd7W,H/:Ck
%789k!=G8J8#hLFA\F=Q`'a*0SO0F-XhA.kF$Vr=3GNRH8H96/,?qdN)@5UKK'ZKQ7=(XKnCa!7e)7XX_-BL*-R^f:4ClNHONr`Z,
%;).N.3Mttep8X^e-/t:&FD4pOqpT5e6LO?Ep$MH^X9B)uI\(tA9pg;@`"G5=d<&8L&S&Ph>kWdY5nX(Y\i)l1_?-el^"oGH1ll_-
%MS2c)4nN@`<LM^OCmZ.Rl85-%Ns4[5mu=,rk5/(&U`qUHMh'ssgFcd<dG7?9DT>^KZ:<_IW>$LY:H=g%b%86Hjajs]IH-A)m)&Pr
%!Hu#el>bdsRq'Oo^$4_MptVQe%tNc"1&-@Yc?"Q8%@TGipaX?l^^a>J:Eb^MB</9c=Ag!?PJ,X3@(J0saO-/E8;R$DfH@REYUX<4
%1,fJ[#RP+$GC>9HYTk)T3fF_^1';#V5N+6DFHT=nka33$"'G;&Od7:KB9S?hAM'LZ;KjM\OV_da?:5+WTXl)V_'4H0J`(l=Fq**.
%=Rk0[@mf*h9/jULS6IrB_$K-+nh]hV)8-EQ1siE\h'QlG1oFoLfrNOhQamgHo"bupY7PLq;bXDa=Ye&PF_C-.dd$e[m]$1t:"Nc*
%O;gYBTf%u;cQe&N/grJtae37I5\Lc$Q"tWFGlXU4;u%E%LeH3Q@$Hp@\`&c61!BNu?SAooMBC4g>tQI`GU:c>]P?)\\%IKsgce,,
%FO(Rl<uYb>0$;gmks=q.jbA#al#A>??.*>R4!qE_cdr$g2-@hB,YtLuq*j,qE&SRl@Wp<r+\+D@=O-:N62`p(89CQoL,&u?Hc#-q
%`'t^-5-EG"^H/5YSHSEZ[+RM%of=HdX`-`#rbM/jgjLUjgop-=\g^PpkCFEi<[9nu4^D0[b-ZTBC\Dtjj29s"6ZFK^6!>*DJUOG'
%Dg3l4=^mECIFgYXmt\fERa[dbD$hU_rV-B1ff%Qgg,^^p=KCfF:[E_9.,QNOdsPgN51J8U,?NuFYM4/+Z;P^f7PU-hHP`U1`s:8P
%m>,W$d/r)_'D$[-FC8p3$)[_C?XDm+X(gXbPa*NK#=q!"b!</%(UFG>d(,=!'/NUoUA8@\VlIZm7Y`6Yc7p>3qnoMRo+Ij<Ye4C=
%oHF)(JoQ^`N#k+KA<r:\a=+Sh<q\,(W>0H+j4mMbeh>9<)V0?N<NMk#LUE3)SZ(!([1><pC270UOp?_/[I.IH[**3)S#,9%qg"%R
%(-e&_F`ggFguq'5Bmat/$?S-TBCMbf\s5It^\ctu!U?>&pN<<!d:=R`U<rED^\*\+d#\\1_%M&nI[U)pfuU)jI!E2Al8isljLDeW
%I,u=DDQ$5!.Q,T3*2RF8_#*2aV\us>QiFk+I-9lcM7%9fHqnEpl/>"Qe-r9Qq3dVnS@l9-o2F*ihRub7GKMO;oU"@m,71s8Op/bK
%liJQ^EW9u!],.fAB>;N-..!b",Ilf*4"d&D#$YU;$.oL_nW^2u:\XIFY'K+hpG&/!V-@OEF>a`A#c26#9=(Z.^(_.u[BsOPK7H[?
%.q7pWjb(S96RpZ/aIk+LCGa*$o@)Vq"_TOa$uadDW#bBS@TJV<5Oq^rg04gfp;'44hJi>i;eH93baI'H@@_LjM<=_E$?If51al)b
%4d\T?efgZ2KrXWrMRTp=<pnYb%ma:%.H=,Hf#nnGfqNLSm\@&Gb4o<Zf2Bi%)1Pm0+!0$/FfdEg&"+2/1HYA`h]LdX0jLsR=^ia9
%8,EpB`C3_m4peiX_q^5i42/teUsIcoYQ`XmE.I4kF'r40TC?\J[EI+u:V]p_I'Fc4Fg4'66U6`7*??gW<XqtkHb.1eIgO/A=*.+f
%4,+I!Uje8>pt!qX?(ZXq\fPENbH'U+)0NJM")bZ@0_6c#UY9uODpn.fA&<8Go7fQ_cbjoB\JFk@r*92;8WNaX&h3"G]T(aI5%/Bk
%Q:8DE:E=r?!\gk.>b6\Iq'gV([[-P_l%pGJg[OXR.WY9.<IPmU-ATD._gOu,jdk"hUZrNd<j!'rhE5rYEG2p4>7X*M_`FSp@5-`l
%P&HWBYhd"q?<u5QXrd&Sc_9Tinibho<$]pqhSsG5T<PeFQ$Dr`WT,'q:Q;:5WXga\9'H)pU7'(Z_e8=nV`$=s"]#XLla7D1-)@!4
%,ZpK/\[XED6I?J45#_XY`5VghNl<+eJSg#.J>?U58?q>R)VRN>`CTp6Sl@e(0poU7VA0XF`J=!<\!9B1(PE@Bj*0_'^hql,0-D?V
%o&p4\jjJW9<.s1S(rCub.YL6hI>>&E-naa+k4WrgV)d6#dS61c(hNO;jtW\jWDRp2YHD-kA-\AM_@4-<:,,tNI!9"[grSJ60?23(
%Ji*Z8Ju'f:b,7L#(s)2?dtUX8Bq"4<'c@bD?V^I0h)(@R'NkkLEbs'3%VGG1O"ghpW5Ca78'O6dOaM2<l?'f3-Mk&[Pn\ej"]UrF
%JIa_Drd]Zq;kP@W4?VYCrH0OL)rkNr+J#+WO&)I[E@pN$&'Se?cPJ\K.8i[m-"?,e0DML$1&cL.F+:duZV#W5q1k6&rq[=smFgGB
%C;>n]i@%/?LY3'HEDJ,gqMl59kchnBc%*FE;X?-slu:W/"DLe,m8%58Eh-4iL2M,Un7q)<n`\7scem#`mqjgNl0e^aAB56VX@ahE
%D</SpZ2;=Q3#XIB;'[bD1:c8m+YiX!\JLX(@=JX$/-QgX+qO#u1^i.Lh*iA*HKtC^P53C]r0o@H@?\Cd5u>r!q=0J'SQR`1nlCT0
%mc*-$R#-bLFA/RiUhfYje)36LNZpDoQ0[TP:<F6".l*Jna]Z5arh/0Yh4LkLlk1C%rc>O6XqI<jLrB(%*G.S1L*q)r"TobdTX).;
%[gm=9b2qn>111$PF`c7i\%DrW1>/;ZnYU<"mii;/XSmZn6W]C?LS"?kgT\0?TZ``69iW)QL\V@V=+<mK\]SgBD.ki_//uE.A@HgX
%ZZa7;j3koJ(<<=,m.>`[EauT42nU*@Mqf>!lMK2fYU/%Vp,\3t5/7qq9R@lmb:SHZV$dg3PW^#%??LXP]B6f>Kq-3D!jd^ZO0XWh
%]fBhMk_%PBXaS6V],tA;F,tgr<o"c*MDF`]"'pWtba/=X(=)Kk4PM8)%d_d"%4?ki+!m5GgWnJXK=ngkdh2<KdQAq<!Y=LrqLDWt
%GDWpj:]8#pdW6VR;t884J(@O/=>)+cak,\M;sV/+%nj]H`3M=K1p\ClAQGLGl!=9t=eH[dI/=Da@WK-sG@7mGg$ib;/oc*tWS:cu
%Il9r7-:Jpcg)hEpiK%".0eb2-SQ*"CWiFgI#"p#0pWlWt8W#Rq;<5aNc@LD\=[oR#aFn-C=2A1S@r=W=L@.iu%]pqIqu1Y[lE/8,
%jJ\A*mhE.5;p*-E%83sH@^dt.f]:(UjQm-COZdeH>8e@3#O00MI+j[[MIDOWa9+M>5N(AE<TMQ$VnV&sld<5<bFi(hNE"b2cEK;F
%P6mIDeU]k7#)@t,NE+t=+c`Fjg'3M83SkL7$K#Qpr&IC)fWF]RmrkiXO8_97r2X\fN.`rY:5:bk=@bY?^b?6p?B;W1/iKaQN@#Bt
%;&+\g1%o]3G@VZe:]9hU/957P@CFuG6n-52N[!FJP:5jBm>gGoX.ek.UI2*'(Oc<D>P@9d\VbE5Nb$`/"]$[/N<nA\8[<GI[k9<N
%3eZkb]1?,*Go5>J9[(-(l1)2H7JAA'i@=E6cIu'=2fod[FQf^m[k2q`Y0!pBd8iV4hGT+h`D'5JDl\2(hq6t(E&]>:gfYoZcO9]`
%DJPB%%o!E-q>PJ\B$$ghNSS>VnBoT_jO'[!^43gj$QFk;E#2Js4(h@!ah_h'l+<maLdUer'1,*=dN'4&2:,ok4$UEo>/nHuQZun=
%\UM8$gbUU.C`Z"Lj\NJ<*d5umURh;*h47R*F3f?UQ9FLA7oCEcc\]UMAiEW/`kBSUU)WgQ@u$g*eN/RUk$l'#Sio!UHRt2Oj%J1(
%'KNKl4Ku0_"((A"-1:1`p\`gNpW7)n?1WUbh%Nd$Sli<tnk.%[HQ]dp=m5bg2:/Zh&2T=CQj?TfU1ZPnhr08f3C-_d#Bh&K%=8J,
%H)hn14oTc^1gM`0@aQFo`s9,4Ae,f1*(ZH;"tit6S]?gfN89/h22uYV1s3+F.rf'1^S%2Q#Y?/MNZqnoU\!kM]4:]J[r[%EFD$m6
%h"./E9lE1,<nWPb@iETM4L*hJ1:'F/`]15-O#Ll=$"oBlFS;EKdGMaeA,/qAT;KfB`-.7JG1M,X]:l:HUI.h*^MVJqEDb:P%1Ub6
%nIk1BB@o`h0s>!I^L7Y2_;V9`&%<`7'_PM=@6QM;l>_24S0.2JEauT42nU*@Mqf>!lMK2fZ?4$^V83\YO*<Pd"cQ2-8Ucce`54D$
%8110c@p0"&=[LG1km^nhXiQLX:?DXrF""!5mNPpBT!dGYj)4)Nl0d^ao""3RB@@o-cJQl\asQ2b<S%_&6<-UiN@CjY)g:]?L8uVV
%h'HC;F6@n""f]+:5+q(o7bDo#G@5(.)r?S0-19&@GPegUDc>%lTD3(-JItH]jlFQi%Pps7SpCY8YRV'O6-a79M9&?lJ&I+2Ge&kZ
%Q9dFobPc.;1[%]oK'pO^d+-3ChX8U/\%gd#X[,6Ebl6VT6uR%/Hf.jBL7_Z@#/JtAT!@H>BEuP+c7=KDjW:&>i=_R?;<#T=B$V,;
%F"_I"]1A+J1/r/Cm[/IkmG)(:md(RYHiA(ElE/+f2>q2OXs0<WG[e"OQ$3/[A%p[SYZm/)*'Dg6-k]]5I0@k;)s0;$QLng<3kO"u
%]u1*1lJC`BjXT`_bu;Z$>P0ljeM"%M?>sCpAkl9?k4I6GPeEaAj^%Ak*`ms2d>XA]OiTLg;Rna30HV)En,(R[=e+GJjFQ,VB#-u)
%pE?n*o[NW=[pOoei;GR@U6^1SJ=A*gN1OQ&BkZW99TPLh8QOgf45((3G5lYj-#)C$9AEWP)7shV]IH>=<h)U5(#lc>2bZGCm9F!>
%h,u$fp\a4@f3==5]&`U2W$*F)_i0._&ILXH/F2SXh0Q_BKQg>0*CX:HgHB>eG2*p\XCP,IV^$X<>*WCQL<d@h\m)_ggV%mtphde&
%k+Z1J"d3l[=%NXu.+47="i\O+'7*acL:.ga]$'F5ML8HAQk'P-]Z6B!ZIc(N_umW2b(b*j=,FOB:Yl"b>IDhD6h`<[^h1cK\C#I[
%,N8mQYb=OCq@T#$^)K0+J\Sn4b=Tn&5+Dl6]]YAbB,,Vu<j>,-UN9>;j3@^A;RG^l[:?5kgN\+V41Iq2m.AWVUh=V@U8C+XG=am0
%@J8^?4V[kFMsl3[o[hLMoTd&,l>@U9rXr.ZMg;n)T3;_ZZc!%7W].HAGSIX`ntOn%(-NV&eSH=mQ:R(rnE_Z-+KhB'R>p@Ec;E9Y
%O?rXmZ'eAZYQ14+S#_'j]XL\;\aQ.ZDX8@0NI!CA&m'9`oR-+*`D0c]-XR.I^?,po+@<X$[O_cR?G%!t[92q=;8JU)=.<=>"8q[$
%h!rc]VI<hMQn04'_F,Db;u2Ln2FOsRJR't$O/XoU2&4cYVi't.Cj?^UBV(hKbY.otqkpIq>Y5Doh@4n\V[j#2_V(#!hc*rTM@Eps
%L*;aV$*db-Zo]spX11,MiGLTcUI`&^O.Pg"1X+J!eK-rGGAB5@S4.>^W;V6J6]WEmLL0WO_eh-=]3s6S%::':%FNr7Me?gEG[d<T
%TYh!%NDZjN$d2!g_KV%CcB?gM7IXHr9b`KeY'il@p$9d'Z82IUroL:H_Gu66?:QfDH??<Hj3J"NJqpNjllPm/ef]cDD-g:ZJ&GsZ
%ZE[W*n21a/QG5G<KUY7>[MrkHIVua>q.U7,+`\9B?t\j3]GnG>4?E,apUqmpr85C>:+^KBgo,1,F._+kQ,)C?%X<.G9:&'QUI`"9
%YDjgE8^Vcm(?Q,I3KDjlnF1VQ!\a,[]QQHN/bfZJ\[./%*J)CMdAhV'\j:U/O&'tTG*1+!Im!JE4S6E1KY-Cn>-B%Q&N:E4j>pVO
%-TD7H7`-k3&$Dns`FM1DY,WcBm>#R4GYs$:TWqof%D2_IkY\MEquiDqK;h>QGs7.D,a`s2!L8]i&h6R1QX.V;dNoV9i-G3bZ0gaX
%'C7tICr./(@H3[6.3LCZJEaq3pJ,r:&r(/I',bt0X01"Gk#-J5H8U'goj@aZhu;GmJ,[^]55b5#J,I4Y5Q8hbruTg",M6JJS+/Gp
%r9]"2o8gZ`_f*<clbEJs^\dNZ0-C5[+927%^AXO>rZ/`N&,<n.Z\/!Bbq2V6b9MM\"YmZLC`0L,d;j:;A^ohfkM]&p[sGc>"QL4(
%jCP'B)f.K3c[,0F3)Bo9\g&?#i>R/(2`D=3ajHI]kgHV9D[c,"(]WK2]2oGseg,ITk')O4S=8QCg<?VY7E<1,n;8CWM\NS\'VbQ(
%[NUMfO:@@cV?3G4PhSW=\HlLaZ9u34oKX?sP39HG#FO@n7+`K$rCikZ+3^Pb8/)O&KVt#L+U\f3^^(eqnDJcmQ'.Mj-pB@WZVqIV
%`H`(.A"LK:M!#1e;A)@h%C9:)GoT%%1)G#kK03.;es=hB1AVJu3MocI=Oe=Yqfkt;iTF[lLSg+h2(Wm9AU1d&"^_&ZRT:mX+X$#o
%n^UWl)!s`)XoO?V>ZG^G#PHnulTVing>"MFrS45gdbha06]sfc`[k:sM<B0&+$O<aNIUDB0)::KR8"CbE^';Sc^<,3KD]U,Hs^PZ
%2jN96RbLVDV6S(am=Yq9<PIYBF,uB6nkBrFL'9%KJZCdCC"f.+<EohEW;']5$&D.'8[#U=Qj1Y/`h5BA0s[0%aihe"jR-t1d0jY`
%YEk#2e%_n:k*J/*HdKI;(K-i)1-CWc*o1.r0<m\ir/Z4spj%sZrKW_p:JZ_g&j*6DA'CA#hkHjpTcRJU4jrjq?bP2;)9FJU4*c%D
%5hXHAigFM.GolIa07"sp^1HRq$,^*;U,YCrE'N6JO^;jQEuAN"m$;`rkX'lZNfq4I7#-se,@&E'Mn.0D9>?/^N^9J6LZ5FsUTla4
%aW5:Iha2a(3%/5cS21GR(=a]/Zdd@dnOgO.O@.>\b@U6sOF-_SmSP%>&=_"Xs6]KP^4479+<sEq;fUt,5N]Q;Yo^2O_GjS<(Wef&
%8KAaR7>NH\F[3;)o#/k3hYEJ2Lld^-<"-e.#m^>JIJPL."i$5BY@RBkT`9m*r7%uol>f:Q;0WG'p.R&6"2gnoe^4(Gp,"c,_rhF=
%&(h[#7/V+\k]J9O(d$$8lXc%MAsR#439\Thb\h9(f&tW2JcqtmBVVJa_SXM/mDE;8G5Ef3KF:`lV)bgj<BIj&lebu'[9Z<TCYV8s
%.$ATT*^f=F1ET:uI_:b20p5+ZXO1,FDI,&TYYastriXOn*nLnU:__IiLUbO5f>L^K$Q[8l1(MD34"`P@!go^OV3o*+NXC[b;[6^U
%!R9rbCr%5Y@fph@X"YN'k9dV5&MK1iDkNqn,1^7XX?g@:]XP@I%7Q(*#%kYcAK)?lNDZN;6NrA`0!XCl*)MO.;[S?&8--t.YG=/)
%dW%JlA.cm`,/bURNoS3Te?K0jWZ4ha/GpN^7Q'4`%MX@r#g!Yf07;/O0M&ir")_%/P^\G;WUN/@/Htlj'c:Ku6I4i6gJL'r"a4lR
%TD8OX>KC2s'kd:LiR_fhY+gPk#:'3iE/e\bDgEjB9+H:)lUHHP^-U226,gW:$Ol*lO'j4;JE9?_7gL_5W!oJ(=W#4f@DlQtUmUPC
%^I48g\8p#W.+!G-$OlGIZ.U&YkQu.4J.f"2*AGTO!flRVNu`s+.a%lA"thk`"3]s10%7^_9i2dBK*2$TVFn)t!R*\?KakfLjFcJm
%]a^')@4[f)]DQu8!>ZceLr_ghX9VMDS7+21#3P!JIEb+>D[3WR)fC>C%<D7(!C(+%!SO)ln9'e+_3TZQG/,W72Y;N<+AcJs'M\jd
%.Ik3lFpgpIeI`o<8#pF))[/V4SNn/&*Xl0Z0LQCLHE^\r]4!B-*/&XiEB/bm8XpK,W.l?+LMt"F[$[e-/s!:`J6YnQrFu*D!HXir
%qA\1(=Vo-+K]i&eY\BeafOGV]1c,K@;%K&o\L/%Wd@TQ7Td(Bl"CtnKH^XfCZm>h;'jt]$KXbQ#14#u$RlJ>*Z,1o"q*'jn0!+Zm
%JQ:<r)%Ksm"[At^I>`kEODk.S>?<(3)g;^s(n7id<fpNTZ068.&f_><B0ub80k(K2^f`H(-J^a+F\)!m;8>ap1d07,#+(ofUXk*M
%Kb8WpbrGk^WZ9U"$&ts;@SV0p8Mu3Fd_rOGajP0hgMao2hNJ/WK-clM.5TKZ#TX6RZX<A$-Oj@rG]8/Lde1f,qTJ%6fQ0.:b\T==
%i5-_';iG@+d$PL6*+uqTnhgGO!]MApYK=mpNq4$O(t;5dK7G3hE8niYRPI.c<!p3O2"?a.CQIKUA<LiGfAM3bT\e)c3<f(U%8nZm
%/?a?4YTJLYYM+$TNo>qSU^b#*f6<+Ba*te:*0&j*dAba`R[/-Ed[nU;.<9)^YOgBK(PO!?$JB@&<C.e9WK[qSWY-^uFq0nE(h6UW
%NjDS#@[gC[>)&kSkLrt4Jo-+69b7LfA0#jNj'L-LaBcdW,d_#nq_c'1CiH@k4RCM#G4XDK\!I3eA]<;gghEC*#lBUkb7cupi?60?
%#iNUmH4olGWM;d*c)o*G-5^99"')?6F/-ZGjfHfGQhk1OC5pAm_s_dd>bfPbQ0^h$!?[$ne*#LZ?<-[gdg\BHR%M#17j4LTO$X>N
%GVe^4SPi#^hli'<&`-b+`=hh'WUVAY9S[KhH&)jCLMh6-%E8'.)f:tBppRP<Rf"^8&!Do%)J_Xd>c2-;gi/Y7>;tT/PmEX?%[X56
%LLeNMjsGS*):rc\,p(]Aq1_s,GDWpj:]8$'^n!&eG+jt/,a<fCJea<2L@s*`NX'_HQ3G15.]9+KA-0g&\2VYT+-rj!>5QK&S3^tX
%\?X(_EHnm4(V0G7eFU0@q>88<EZKB$cWZ'rO)/+U1aDu7ItI_>SpoOap\WPr73_EDqs-Rt>(e(Ia#18Y?Y!?0#=p>+DlnVc*=n\=
%U7AjXjXJ-;NE'n1\4Z759``Ni!tO*baL!UWdJP[#OTb=QpP5q(61Z=;Km_RfqP,2Xq@XkZY:0W"V;E!AM<\&_'4Q##foK)HI'hF\
%NVdn+88^TfNY?kkJ0VToh]L!cNUA"il&/6]Mrs8$qsk2<[ebZ<p:]n;bDnfFo?S?G_W+ZsOH.Q@-:S:"=Bg[$l-8#39&cW@%J0KP
%2in?]F*>8d5Y>t13cr8ZbTg=O!=tgNWButY>8SA\%GT!ed%TI67O-e"(""s@IqRaI(+Nm^FoZ:idqB][]eQ4i5+C85:%k":a#U@0
%]6IXHhQR:==Q&9kPQk64RZU".C!R1&"u2p/0KIuLP`6<Bf]CRIQ#U5=]CHh#qYl<=-go_Up]Sh6n\CiViku7b0,>!7i5(od>.\#B
%c*A.iX@k-PjsJ-uo&`u8gS`9FV%NmD<=^YKFNer2`;%-RDEO_@$MJNEOtFn-^>[lG\3QhQrj?.!.XMB$M=dRW5r&)=$Jk2_^-I[/
%dC5q^6X.W-]:pa^`l"]U\GYNlfLd!]Q_B_Q&6c3d=):ZJ-&A+P];!^clKGi5G?bJhgc9RI1ENXh1QjSnNmu5m6P?K7I_/I8kop_3
%GC/2cI)]^B"L`nEmVn5&Eib%^-&W?+NbB.U>M0HqC,[fp@76c!qc(RQmYKq+oY!c9LNgfrH$ib[3L*]=-6nuG<iEql5!<hVV[_5E
%C:aW)7t[(>@)9eR'X4C[".&cr/LOf;Gpn`aMXE>`a*M@7^%G%u:d1XE@2l^V]&DJZ?/4kg6^M@Q])<q3S+^hU%)2Bg.=pXa[MZ.7
%Y\<h"7J`gO[3,"T]5W5a>s4,$fWFiVmtU6SGD@79ro%jrJ?74SD%)Kh@Wnm'&,?)(^.E\t@*@d^i*.@1)4u?bVB;EH_Ft9#2m=ku
%2WPP@gqGB'"g:,(7bNaXhkGVH`q)\BT3r]McWs7BMN.oA@6lBN,U&Mgh'k/Tit`/MPo5ps6C1=R7LrO3bRUaidY\k0o-j"r7@,)W
%FdF*1Es[HB[CVa@kG,je_e+gepH)0:Eh9jMX4o^J*RNknmSBI`l9`u%RL^t7:""O*iC88)16P-D2M6S;W4]Z?-g&0=9+bH:>!*)O
%J$]9F%n][e]4t*!i6.[+0cht`iQ<)18N?"?aPe^<mkAGn\^#6PKueXJbe3i"@F=9>S#>A)Gs?Uq(#;(`9$aT$OjpmLqgO%1aU*E`
%7Hf2ZU%1]nLOn")j6aI\PpYBDb'D7\cJ01B/B?ZJUqttf)32sr&7PqQg6i&843dO0$4cJf\?0<Hm9D=hCtkJ]pNSLRHTZmsajMB*
%!2tij#ZcgE@'M[L$o&)_6q&'P!,_bUY7B46r:!:.XqH8Q@F)1C(f`V+@Vq`>2V35Ib2.g*RBB5eIMS23ml$Sp@+F&s6BTo@qt.Pt
%RBniELYiR7K\WH<k`s!t>m$#YR%NI=AdZ4T<)#R^gi/aVh3qb@j;OuTCuBNW`_#'a*nJ[5+*=k?JNaJ2%q&3d\<b(,:><>ciP7F,
%O@(*#cAS'D;UKHF(mYmkbmlK(8jp7&N:g[j:9aB#.^'AXUJP.2\EOmi,G4pgUgBA?#(mnQqZhYNeefin?-;rJ.jdQ[5UT$^E+8-N
%5RMC5M/sAu!X14qHCD`LOF'c62C1C4L9AQAs1,;2%%4mW"E,$G^("Jl8UAuUAr%-(?!$d:N0^CX5Ah/<Hp?1e+H&P9r$9`t;)_Wm
%r&pBA8V07Pkted/?%gC-j,0D^:$E)>9)<n_UW-e,pup$N25CI(rt3r)0Da@$,ndMd?i5%L_pN^dpobPqY8DSf_j6SEMZZ(Fo-`Sq
%pA\3Anr]9F?GF;NpQq."Z<J$@*+#37\*9W2>tW]FDK$)5$O2Pa6;0SA^qur/W?)@7/1;p9E0a#4Kj.[OXGb2,h6.t$$qG$;V)&^@
%=Pn_l!GEg^4Bt=BChoDY6V*VD`fNEgC.FiF)Tl_8Q3_eXFqk^GE-5&A#U7'9K"F_D)f>S9B9\pFe\VrOWsqCuPm!@fH,-a6>4kEg
%MG8m.K-rJX7lEoM8"PXTdt5Ak:Hpl7&nTD6"I(g&iP\lPQlg?.YnS?F`XYP&&6@@Y`BStqZ,EmsQ^\NFl;QHF/)TGJP)h;V.Q?1n
%Zon_0P`b(];W^FOl2rHs+1q-Op9#5Y0<Ut4DirZ,PNl^84a`1OorHYtE^'U7]K654WtSs5W1F%:]_![oJi>?D0o_hW(tEumcVTG<
%JLhR?7$dafLP=('\\JQm4Ft1:Z7>Sr%%;iY\()N]p*u`Kgo>@?J1eVnlG67%l!Mf5Ya-DP;:C!BbuEgR<VQkint4peOniM1o1_d7
%?H=#Q6V`[OFdm4C/?O/S[J;+S^4\sK#*%=#3A+8SV\@S]R!<bnJ'5M\XnV.ABV]ItBu)CG4khRX:rO0UM1E6Hm.N7gh4W<25WVi)
%+Ch;lVY,K^>[r(;&:i5.B]t?RAsMRX2kW^1V]a>?MS';N>(%@u3==1Pb/)0/BR\,&L!'_soAOSb>gFZ.kME:Dm&T"hEZE_F^=%6,
%a:^j%r>[VIi`I'f/M$HKi<5biL))IQ9ri[M-F%X`<JB:sC!X90DB[YG21C#uf73?["`IUD8*I_3h1=6W9/%4mVTk0VdM#l!nf?;k
%dfo$$Yfrtp8gUH"3T>BCna6c'2@.<=!/2)ApTM#Ak6?@QHmFoWe^l+le9=i,e\qB3O2CmYR((;qWsD09@u>T=C]JYHFM!WRfL(`g
%-S<HoI#X-smAL7_!Tl2L_1j\qP*;>nT_b_W4KNX:KK&)`KLE>(8V4iFmo,0N8Das],`5_EpF+n[Z+)TrLX>lk+5Cn>)S=tToeTY+
%JQ]I)3mi\jGH`\r3,!K5kU8!Sf5'JT,0EUn%nVZ7,u<<0Yn)LiAl*.N[i5kUT\Seg9Z9FEo[?`'_:t)L2ZjBdqJJB+.\tDSlW`.Z
%]1tAX`d<fPB-s'?fRcmhc#<ku^<!7oAnbS(*V^;b--0_)q6hD9=)t8t4ZJb597)?^duK#Vj'K.oTUs,4mQ:Rg1CEcs^;R?p%[JW*
%@N6Pb$`YF`,o.W>!mcV$/0mUkVnH0BXSQ7d[s^2@FDY0:e=JOCn$]jm$H$p6[#M3j4lSroW5=CJ8kCG.WHT#KKLCQRF"M%N)iY#'
%e0B"epusrF/_8;.aV8ao#<S/!mp0!/.1ZZ%@8SCu'CUPQSrk\U4<T-LA'hI-E@9=G)_KQP6<IPeaVaa-BYIcGhp>QSD7#T9(N__/
%>ZmLB,M,NIj.[](k"?(fC5TQU.X_X\[\0_p:c@p=Xq=9:BYs2Yk$V!P/BaBNnU^/+SLN)5I*^DcI-Tih3HS,%HD(\5X#cm,,&cc!
%m7VdQ)Pib?g+@<gi,'@sCJ1Ni?4r.bBc^ur;\%)lP&F"jm0[t?3o!70PS"nb[*,/>.s^X:ZQYpLq,nPC&*@8Si_dr?Ke%`Vm13bL
%52ejY5P8*m91Wu>d_rf6>VJ8"bV5CRH<#+WNA]tB6MKR_[kC'QS'V3$^'9kFqR]1/nReRGLVkAt0T^Y<cV5GkDmif5E"cnhQT.Bh
%qgFBJ^4!2RA,-kH%3</)nR#7V\5qJ_Q?ClTU?$OF&@+d>N@75"rqef^R;3+Ie"J4l_(XKSs'^b(c:F7Y=eP-bl\B@8RM]n*W/<dk
%ITD[[Hm(OLKjY7pRCgk8o=D`,/@KTnm-GF1'Nn_Y>ged=-(mp(qHGV%]BY+J0;^cHUk@4NUS/4<M8ODSYBS5I(_e>d!EB0SY,d00
%1u1:c1rfPf\E:P#+"W]u\XOB3dADQ'2`t,TH,h>VM/C>/;NSC\`^q`!97'LV9X2"nV@dXmb7bQR)T5@=_O:ruKG,B^`r>Og9Ar49
%`iak!3UN@/GiCt/c.'GMk`=mTc]c$J)H-GG`IZ>>ZPm?)i#ZL:_-70L+Cpt$'R`\-7LuSd/1n^EDm6$.S,inBou/&'d@'o([YA-i
%e16IQ?]O<AcaT&^WB7!a^<ql&RX+4A"[K$S3Yr,i4dq*)lu_\c49Z.n,dGi5OE2Et++tMSq6UsaedC6#/?Xqm!#MHKp0;a"jh@W#
%BpK?GG_-24hV_C1fYnit,th_n`\ZL*RTG_@2cP?VM`6EU$dX!5?ZT^0k1*2N`F3[OG:OF]"!q0aeJQ2B%3B-6Ws,Y8H(-n^V6OCZ
%<t"GrZGLn)\-3^Pd$G@MR$oI3)W-3:dZR>++@nb"n=MM!r0p]`Qpe_('hba=pdNBYWdC)hdpS+fBu<o/'K2W64FHJ\K!&+gmYhEH
%UXnBkTPSFpBjpRP291$k%Bc1)Fs]8?X3m2dJe11mqZi)b0ua&F.%g]I**J>J33A\)[Us)E083n]V78*HO%CgQFn;U`0(]cXJ\ss@
%#Zu?_R3+DWff!$j[;&S!`0t$XYSj2"3Y_!3FBHmA'TVOKA*N^:JKdWTYWaD-!U[-<E<PFm8p4-&?n.g)oO]9U7OkhH+XStC%N48.
%-t:R"1()O<@7sdOR?*rW6-nUne9`aOR%d<d$$pP=7upQDD,s@r1fq.^RA=#_-CHM%2ppF_;54L+\Ac(P04<Vk(lp3$04<A6//NYA
%[V_]>qu$WCDmTOd1R(mBng@4P6cF3WO'_Yp=1MNTN!bFc`R9("(/.#Z9k4IFJsVp]91FjBULu#hL64Z>,],;V?0MiGDIpVrgH2K5
%EXFPL.fuJc;*g^$C,K+hianWfCGgo!0O0C\l03Tj)HJPF.j]+ZFWW#LOeNk6kJ*WUZ8;s_'?>?@J\eaK9in!n:&m67j#J\"3uAgk
%koHU1RJQAg>_un2MJY6F$&A>jVm5*%d:(EhLr<J@'pN.#9&26UE#(pPLg/'L=>/-PJWW`Ec&<Wp&=g@m9l.Mg#Y_=OiC:L!goD:4
%b;r0*EU$uI@I,2@g2)I\JW"(e6/Iiqeb62@#-70m`:=6jUO1mfrE>Wb!&&PP`.pmEY3.+H@InR0;p1Y,D6F`24#WVqN!jcH54_f@
%$A)SX#ZZ.L;CH)AKPkkHG\d$XP@L4=-X\gaRK+kuW\!F%:6Dq+_(ZgpjtfRYY@2(&#L:*FMlMqXUKAC+11%.1/\jPAh$WVrEWLl9
%`N,pjLh+PMe@Wb96FCke,_$!9a*pKodr-s-83IifAOD*3T\h,Wg9a)1Kn^tWWE8]@JnWaj0r+no?#YL'b5g5W^qqEP+3E5UHM8A)
%Gjrs`m/3X;fKncu4M]YO.oF"<Yn(HC8_%gIlk"=tk-@ZA^il]j#$25u;<i*23BiLgA2a6!>T:p\&%W8J,*Z&2%:GPb<#1PkS\r&M
%rN,`+_F<'_C+[CsW'+@.g1ZPa5mtb6=sLc!U[U8"BYp3t:srBe--u)N3a1e5'5^bDGWb6S8kGTAlMKg;O$X0lPn&i;;M/f]dTJ6W
%YFFWZ(EC#cPU#m=eYPcq^(1.^>3r7s-[FN;Bc$Piq`G7(-9#gSrjHoYA_nPq9f9ALF<rtX^fAojDfBpRa4Kh:?8@1tAoU$kd!o8_
%[[$"fCXS6opg2(l#3tAu2QH;5e2$A>NNOM;9us\rVnI9,7HB'$gequ@%efGH&r,5*GV*lZP\BR=YBa8LVF.CjHbkX*iA)I0[GFPJ
%??E##=<U8&8JQ(d)t]i%.t;m3IT7n"g,D/t+a#!4LVBTpL[21353ibe_p2<,7]dmreubo*A;5'2)r]9W]0j,s`:5/1\'$jgH:4AX
%-)*kH\R[4q`8Ii--J,-El/jG9)f>10RSpV72NeLh*&+!Vg^TTAoSWG%dSaM0&1Z++&T0a*TMXC.JsBV20s';cT-Igd5Xfc@+Mgp]
%H_b@;36:Hr.<IoSE*#&nBI(?n7$0fD0J7.c_jGo_b8X1^AW=M$$U9c7DM8pV<4>*s?"ODh-E1a]Idns9NYm_Zk%;,^82cW"dT@Ia
%l8CRP>8u7ZcZ'7#D2dnc)pj&Gms4>6@bke.LPHChD,`nbk`97GKAL=K;tX%i97h<"CniE/c>"7sYQ[/]@O8u^18pUn)9;.84O/o<
%07F5OZ276TfFV8%d-"j;s4A.n,/?$/8%s]_]-iMWdTICaOZc,rTb+&-?t'3%BSRn13jE?d'UeF.Dt[\p6?K0:FH==[2o+-H?"HRY
%G@"la?33ZQ8DbQ,bU:6!/)od8T#o[m`M@T7]@0/eO%?U2Id\*0#f!3J,&XAdo4*].K,,)Y0ab/(1-oR#M23^-nn6!dQ)>(#L##-_
%jpnelqWObMZ^bLP"[Yg[oZLZZEX8D5AN?Ibc,Go3F*!0"f1&FMDEuTubieXXX,4L0HI_T]d9,Ke^^$<Nm>8%^AD)j==#t)W;bcBt
%68C4Pk?^00$GK]&EHIcfE7.t$3s#VI7jqUYep.X@\7i'n]C$h@^DqU!4N4#@.RI4EocVRbGZVfrfA-+_lpYBSp>E-WoYa95TL+8q
%Se]om*E=W#!r:`sMaNH\J4/QgaE;j2HMRp*]j[nY.=Xj*(qL*XofZ)TF)bXsr(@XEdIE'rP5$aVIK<IF*MmS<CTsk9i@]e);!"pH
%7A?OiX1>!8LcbY<hpOd/q:W/Wlj8f;.5r-;5]n,d0B>"l7,nebBV6b*#=^_+<a![I@Q1G94Lf!I,"kp6!%C1!EHi7<7D#]K(sW<T
%*/+2$``Q&WO"L:\>o44cSRJ_i?K10t#9=k@aUq+ti"Zb)\12$HY-6)rDfNO0PU':=Zi`CUh>?.lagJc&0RD8<>A_Qc'1VM*GPUZE
%3N4P;^DS=Xe&,ksZG4U0-ihq2=Kps7r]Dfa=8X!./FgK0I1;Z3\TTU#+7aK,#$qtpm_b6_jgu1rlk$/<V1"A'n.Y50`<El7FE1fV
%\$o4,h\B)h[]L]=MfNQ$Z;7XJQu[EDE@fW,:Iu.`X,Q3-7J&qPe?<?1<(n.Q$=^FMAZX22Oc!\i2:g)=lnYn&S"%2sQ=bhDLX@uE
%ASskgE8LK$'jI',A$*5%PH3X#[U"1+Dn^t^=rsJ<^"L`\n@SR7B9qh[R-jC/RX$RN,RV.*`Kmbt.r<j#*O^G<:rWOb!L&s)+C9"9
%#IN_GrODW;@Z`FaJfS!B3I%3r<#X[2\.&-=/=]]F=^FkjQj6X@c4]J_iH_kZ^J_="LCsq'<2l6>$=ZhL`X+S%<C=6`[4cY4<uHQi
%jh*j<ZAD'G/P%+:`bV]8CfrOO*7Mr7hBMIKZ!$f^VHnb.Us:S4GF&dId04L$LgdX2S(Djbne9::\,$jn<BO8J?TXXM5S"tW!KQH]
%N5sB3.?;>[<1quI.9I.j+(9inYg/`E.G2AJ`3!0:o\sEmBQ8qTngqCSdNZegL+q.Gitl"8NbS=3gPP+Nb(8gLnW#uf?+P0qLKn!f
%j+g+S,*TT)M%2JB[77.K%.d>8HRZ>E2+*_ba.SehX1Y:6'iS!)_#8@h-V18]pFgd@<::KbfZR$)VIu70e]fnlhJ8dbnfaH^ZdB`G
%ga0?M:D9DoAHn]6m,O+H>OkTsE@4Qb4eSRPG=A7Z2Z5E$&5B%=mWMSdn6?_e&tA(EJsk.e]*l%\c*Dc!`nHtDke55LB!'YW&%cKc
%QA`+eV8UH0bI%06rJt[6Wt;/M8kf8%@bG"4,.p(Mh\V19##IgB5@mdQXE>*1TR$1)S!ls7@<k>\(!TG4A_tVBmpdmAYh-?)]ZDBP
%^_IshRRV3@m@!B$n6Z$K[7=K=oF=tBXB2;Lc:^F4D@CbSrB.+`?c-+QEqA^3.Dqibn_hF:Gta)$1e=*e#37;%Hnh'RHl"@H3j4c[
%02M0$i4Sj02otPT9E\20Jjqs!e[&Ji&iD;t>J'9)^?OqB+X_)aJGe>7OU`Q(GVo55c;oVn(7EC[;a-Ia&A]gSE=]^VlI;!lm,-J?
%.%YDB3mrO"\ms*$UuTF$L+L^3H*G&<SIEP(1`&Km3e"HTB89E,GI0=lLo\]Nf<0q/R;BIWRSF"h.1@AJ@iN@OGUbXUaR2@0(Q&`P
%I+dQ91'48]!Z7#B+UR`6q5?6G%t;W!Q;?#*5TT(Wli*RtajfpW1H4J8pUni\MEqQWA@!960b3`ZBdrI)\&`p+Cq:Vl1_FJBahtm8
%%I1o?s1`(aqh2fPbM(/Iq:!SVMJ+$,BY99NQ27.PMH*Sl+40-ijb>PDQHZUkiFk.UC_"_R>o)-ID>!WBMX4Se-9E\Cn1,7'h&;(*
%X?-bHG4_>=dd,9Z3O0P]3[(\!2WUu;M2lo*hs[LfEEBFM@^j@N[r]X:@=4N!pQM:\pN9*WiWL:Pne*TT=V%J,[4^4\!M-pXkh3!=
%c#W#0.Y6<@Q/m@q",#HHc,bgY;3m#"NP2J/D:CXpIXDRU%>A/Zh#u5Z_M^97E4qeIF=aYUSdTA0CQrugCFkOCAC0)SWHeG7JqfK5
%os6S-;d],RV$A#mSi7oM]&1p04,U1&fAeLB27cF'ThrKTg9;Bu<'4,nkX1&sZd55'DjBf1h'K9lKHj=Ih^[tf>^<AhUM%udK\,Fi
%6BMC+K=0P15YN-;6a_s2qtUO4D!Iu`2"?U/g.l`InIt+hgJ`H)>Zc4$n05g"W&p"G1A##/E5%dkqC(;[\k@:8[^/<e:-'cY.bs5j
%oIf)[qH./_-BVMd4j#<tYAg8GU/qZ)dDlU#,sAnX4iZ#,D!g#()a-.50&\[6gNoJOr&l.TB1e?-KL@D=.KSVmW_$B.5tVpKZbT/K
%`#bbMQ>3&c4q,o@Mm-qVX?2q08`:BJ$%sj)4ZUt)&jaC\CLY6lfuR0Y9s6.^lfQ<"#]huq.?7)I'.2u<bk"L;R>qc[bQH".BnrlS
%dU_jfoKuRN%HD#$Oitqq_XS!C*Qan+jb[53E<e5.VD.NN$q/_<E%gAD;@qQ\kIGQE\.R:4%;Dr-RH=n7Wr1P3`)#jQX)9L>E`FAS
%6c6BZ3bR/Y4DK]m&/KWFgYZ&2c)q4lI.5:;B(@\a"Er!5:kfh_d4]"J\Fa&*AhtW["^7gZR:QEf=3$RS"@FTH2[3!'@^=tWmqC?a
%Z7gq<RIsEk!V'BV"i-!pI9<0C>]+>8AeRSu8XhWDH!?SsbWg%hE2p.XBO9cpWn='J<h9SABJ-SU1n_Fr?sWTo?5Z%P2c=4g3Pndq
%aF)(S&u&,eEWDsV#K)'O!.ofThH"o%nW:+cWkcgO$m^5])Opa6FSb7+Zli&(';9BoTm9IQ/otZ732>.aJ;Q/i4hncJ6\pYIfOFq*
%]#eV"/V&Zs>Og\*m\$BcZT)A1Gl7lcGAZI20ab&2W_=(P0l-]kfX:du/HplujR8;OCga*Un]affraS:28qXLBo>m`p/aV\->4<k\
%))2`#2DJci]0sQUUH]Ykf9CsNEn$(^C-qk\,\MZR('A<NeT*Qi@n4mAM^Y]XMRBl8^$l;ZB[rSKP2@F?].On7E6T3*7?AQG+m5ko
%kL?TJ#a4,bd8br$2VKs1:M-!UDs?r;4MK'hWsS':gO)gNo/d&FMm9=6OtRXgO?TW_@cJlBHKholU)?NUJgX_e%'h45="HYu(raSn
%P+4mNB0,Fl^UK=aMbc7g.XYjBB.KH6L;9"+KcIrJ!mqhr/kf[ZCqZ5?HM\:1TR%Z+\D3s!5%1R5,Jg-k\<km6i7M.h91+#s<HGH5
%s$R<JoKWhAj7[5Sa#JWB$Mh,dWU35:<0,R%?4`[)@*"pAEhaihhT3+sHl.A.BraZoF'5u%6OMj6eVHf5->Ut0!n/p35V,"'r&&,p
%[f$`i%5;@GVdV-N';3KE4mkGJ!8Qq+Ujsl^ngLuD-t0'6QOqGEdC`"VPeE<U0/NsDjLm4Y_EY]u%0#b%48d!s%_]%*h3.bcTcP5b
%"8bl8"2=g6r5IRlVt,oKn;%&>rr'V0nDh"8:>jb(jnms7nDA`nrcc-WiQ#=(eSkK[rBL>Oc1c__"7#aAJ'U?-o@k@:psYl8pu;nB
%r98_0nc&U*O4FhjrTet.ci<N:J+\9leitCa~>
%AI9_PrivateDataEnd
